// Code generated by ent, DO NOT EDIT.

package state

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the state type in the database.
	Label = "state"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldStateID holds the string denoting the state_id field in the database.
	FieldStateID = "state_id"
	// FieldValue holds the string denoting the value field in the database.
	FieldValue = "value"
	// FieldTag holds the string denoting the tag field in the database.
	FieldTag = "tag"
	// FieldDatatype holds the string denoting the datatype field in the database.
	FieldDatatype = "datatype"
	// FieldOperation holds the string denoting the operation field in the database.
	FieldOperation = "operation"
	// Table holds the table name of the state in the database.
	Table = "states"
)

// Columns holds all SQL columns for state fields.
var Columns = []string{
	FieldID,
	FieldStateID,
	FieldValue,
	FieldTag,
	FieldDatatype,
	FieldOperation,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the State queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByStateID orders the results by the state_id field.
func ByStateID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStateID, opts...).ToFunc()
}

// ByValue orders the results by the value field.
func ByValue(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldValue, opts...).ToFunc()
}

// ByTag orders the results by the tag field.
func ByTag(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTag, opts...).ToFunc()
}

// ByDatatype orders the results by the datatype field.
func ByDatatype(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDatatype, opts...).ToFunc()
}

// ByOperation orders the results by the operation field.
func ByOperation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOperation, opts...).ToFunc()
}
