// Code generated by ent, DO NOT EDIT.

package state

import (
	"ct_oval_tool/pkg/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.State {
	return predicate.State(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.State {
	return predicate.State(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.State {
	return predicate.State(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.State {
	return predicate.State(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.State {
	return predicate.State(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.State {
	return predicate.State(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.State {
	return predicate.State(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.State {
	return predicate.State(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.State {
	return predicate.State(sql.FieldLTE(FieldID, id))
}

// StateID applies equality check predicate on the "state_id" field. It's identical to StateIDEQ.
func StateID(v string) predicate.State {
	return predicate.State(sql.FieldEQ(FieldStateID, v))
}

// Value applies equality check predicate on the "value" field. It's identical to ValueEQ.
func Value(v string) predicate.State {
	return predicate.State(sql.FieldEQ(FieldValue, v))
}

// Tag applies equality check predicate on the "tag" field. It's identical to TagEQ.
func Tag(v string) predicate.State {
	return predicate.State(sql.FieldEQ(FieldTag, v))
}

// Datatype applies equality check predicate on the "datatype" field. It's identical to DatatypeEQ.
func Datatype(v string) predicate.State {
	return predicate.State(sql.FieldEQ(FieldDatatype, v))
}

// Operation applies equality check predicate on the "operation" field. It's identical to OperationEQ.
func Operation(v string) predicate.State {
	return predicate.State(sql.FieldEQ(FieldOperation, v))
}

// StateIDEQ applies the EQ predicate on the "state_id" field.
func StateIDEQ(v string) predicate.State {
	return predicate.State(sql.FieldEQ(FieldStateID, v))
}

// StateIDNEQ applies the NEQ predicate on the "state_id" field.
func StateIDNEQ(v string) predicate.State {
	return predicate.State(sql.FieldNEQ(FieldStateID, v))
}

// StateIDIn applies the In predicate on the "state_id" field.
func StateIDIn(vs ...string) predicate.State {
	return predicate.State(sql.FieldIn(FieldStateID, vs...))
}

// StateIDNotIn applies the NotIn predicate on the "state_id" field.
func StateIDNotIn(vs ...string) predicate.State {
	return predicate.State(sql.FieldNotIn(FieldStateID, vs...))
}

// StateIDGT applies the GT predicate on the "state_id" field.
func StateIDGT(v string) predicate.State {
	return predicate.State(sql.FieldGT(FieldStateID, v))
}

// StateIDGTE applies the GTE predicate on the "state_id" field.
func StateIDGTE(v string) predicate.State {
	return predicate.State(sql.FieldGTE(FieldStateID, v))
}

// StateIDLT applies the LT predicate on the "state_id" field.
func StateIDLT(v string) predicate.State {
	return predicate.State(sql.FieldLT(FieldStateID, v))
}

// StateIDLTE applies the LTE predicate on the "state_id" field.
func StateIDLTE(v string) predicate.State {
	return predicate.State(sql.FieldLTE(FieldStateID, v))
}

// StateIDContains applies the Contains predicate on the "state_id" field.
func StateIDContains(v string) predicate.State {
	return predicate.State(sql.FieldContains(FieldStateID, v))
}

// StateIDHasPrefix applies the HasPrefix predicate on the "state_id" field.
func StateIDHasPrefix(v string) predicate.State {
	return predicate.State(sql.FieldHasPrefix(FieldStateID, v))
}

// StateIDHasSuffix applies the HasSuffix predicate on the "state_id" field.
func StateIDHasSuffix(v string) predicate.State {
	return predicate.State(sql.FieldHasSuffix(FieldStateID, v))
}

// StateIDEqualFold applies the EqualFold predicate on the "state_id" field.
func StateIDEqualFold(v string) predicate.State {
	return predicate.State(sql.FieldEqualFold(FieldStateID, v))
}

// StateIDContainsFold applies the ContainsFold predicate on the "state_id" field.
func StateIDContainsFold(v string) predicate.State {
	return predicate.State(sql.FieldContainsFold(FieldStateID, v))
}

// ValueEQ applies the EQ predicate on the "value" field.
func ValueEQ(v string) predicate.State {
	return predicate.State(sql.FieldEQ(FieldValue, v))
}

// ValueNEQ applies the NEQ predicate on the "value" field.
func ValueNEQ(v string) predicate.State {
	return predicate.State(sql.FieldNEQ(FieldValue, v))
}

// ValueIn applies the In predicate on the "value" field.
func ValueIn(vs ...string) predicate.State {
	return predicate.State(sql.FieldIn(FieldValue, vs...))
}

// ValueNotIn applies the NotIn predicate on the "value" field.
func ValueNotIn(vs ...string) predicate.State {
	return predicate.State(sql.FieldNotIn(FieldValue, vs...))
}

// ValueGT applies the GT predicate on the "value" field.
func ValueGT(v string) predicate.State {
	return predicate.State(sql.FieldGT(FieldValue, v))
}

// ValueGTE applies the GTE predicate on the "value" field.
func ValueGTE(v string) predicate.State {
	return predicate.State(sql.FieldGTE(FieldValue, v))
}

// ValueLT applies the LT predicate on the "value" field.
func ValueLT(v string) predicate.State {
	return predicate.State(sql.FieldLT(FieldValue, v))
}

// ValueLTE applies the LTE predicate on the "value" field.
func ValueLTE(v string) predicate.State {
	return predicate.State(sql.FieldLTE(FieldValue, v))
}

// ValueContains applies the Contains predicate on the "value" field.
func ValueContains(v string) predicate.State {
	return predicate.State(sql.FieldContains(FieldValue, v))
}

// ValueHasPrefix applies the HasPrefix predicate on the "value" field.
func ValueHasPrefix(v string) predicate.State {
	return predicate.State(sql.FieldHasPrefix(FieldValue, v))
}

// ValueHasSuffix applies the HasSuffix predicate on the "value" field.
func ValueHasSuffix(v string) predicate.State {
	return predicate.State(sql.FieldHasSuffix(FieldValue, v))
}

// ValueEqualFold applies the EqualFold predicate on the "value" field.
func ValueEqualFold(v string) predicate.State {
	return predicate.State(sql.FieldEqualFold(FieldValue, v))
}

// ValueContainsFold applies the ContainsFold predicate on the "value" field.
func ValueContainsFold(v string) predicate.State {
	return predicate.State(sql.FieldContainsFold(FieldValue, v))
}

// TagEQ applies the EQ predicate on the "tag" field.
func TagEQ(v string) predicate.State {
	return predicate.State(sql.FieldEQ(FieldTag, v))
}

// TagNEQ applies the NEQ predicate on the "tag" field.
func TagNEQ(v string) predicate.State {
	return predicate.State(sql.FieldNEQ(FieldTag, v))
}

// TagIn applies the In predicate on the "tag" field.
func TagIn(vs ...string) predicate.State {
	return predicate.State(sql.FieldIn(FieldTag, vs...))
}

// TagNotIn applies the NotIn predicate on the "tag" field.
func TagNotIn(vs ...string) predicate.State {
	return predicate.State(sql.FieldNotIn(FieldTag, vs...))
}

// TagGT applies the GT predicate on the "tag" field.
func TagGT(v string) predicate.State {
	return predicate.State(sql.FieldGT(FieldTag, v))
}

// TagGTE applies the GTE predicate on the "tag" field.
func TagGTE(v string) predicate.State {
	return predicate.State(sql.FieldGTE(FieldTag, v))
}

// TagLT applies the LT predicate on the "tag" field.
func TagLT(v string) predicate.State {
	return predicate.State(sql.FieldLT(FieldTag, v))
}

// TagLTE applies the LTE predicate on the "tag" field.
func TagLTE(v string) predicate.State {
	return predicate.State(sql.FieldLTE(FieldTag, v))
}

// TagContains applies the Contains predicate on the "tag" field.
func TagContains(v string) predicate.State {
	return predicate.State(sql.FieldContains(FieldTag, v))
}

// TagHasPrefix applies the HasPrefix predicate on the "tag" field.
func TagHasPrefix(v string) predicate.State {
	return predicate.State(sql.FieldHasPrefix(FieldTag, v))
}

// TagHasSuffix applies the HasSuffix predicate on the "tag" field.
func TagHasSuffix(v string) predicate.State {
	return predicate.State(sql.FieldHasSuffix(FieldTag, v))
}

// TagEqualFold applies the EqualFold predicate on the "tag" field.
func TagEqualFold(v string) predicate.State {
	return predicate.State(sql.FieldEqualFold(FieldTag, v))
}

// TagContainsFold applies the ContainsFold predicate on the "tag" field.
func TagContainsFold(v string) predicate.State {
	return predicate.State(sql.FieldContainsFold(FieldTag, v))
}

// DatatypeEQ applies the EQ predicate on the "datatype" field.
func DatatypeEQ(v string) predicate.State {
	return predicate.State(sql.FieldEQ(FieldDatatype, v))
}

// DatatypeNEQ applies the NEQ predicate on the "datatype" field.
func DatatypeNEQ(v string) predicate.State {
	return predicate.State(sql.FieldNEQ(FieldDatatype, v))
}

// DatatypeIn applies the In predicate on the "datatype" field.
func DatatypeIn(vs ...string) predicate.State {
	return predicate.State(sql.FieldIn(FieldDatatype, vs...))
}

// DatatypeNotIn applies the NotIn predicate on the "datatype" field.
func DatatypeNotIn(vs ...string) predicate.State {
	return predicate.State(sql.FieldNotIn(FieldDatatype, vs...))
}

// DatatypeGT applies the GT predicate on the "datatype" field.
func DatatypeGT(v string) predicate.State {
	return predicate.State(sql.FieldGT(FieldDatatype, v))
}

// DatatypeGTE applies the GTE predicate on the "datatype" field.
func DatatypeGTE(v string) predicate.State {
	return predicate.State(sql.FieldGTE(FieldDatatype, v))
}

// DatatypeLT applies the LT predicate on the "datatype" field.
func DatatypeLT(v string) predicate.State {
	return predicate.State(sql.FieldLT(FieldDatatype, v))
}

// DatatypeLTE applies the LTE predicate on the "datatype" field.
func DatatypeLTE(v string) predicate.State {
	return predicate.State(sql.FieldLTE(FieldDatatype, v))
}

// DatatypeContains applies the Contains predicate on the "datatype" field.
func DatatypeContains(v string) predicate.State {
	return predicate.State(sql.FieldContains(FieldDatatype, v))
}

// DatatypeHasPrefix applies the HasPrefix predicate on the "datatype" field.
func DatatypeHasPrefix(v string) predicate.State {
	return predicate.State(sql.FieldHasPrefix(FieldDatatype, v))
}

// DatatypeHasSuffix applies the HasSuffix predicate on the "datatype" field.
func DatatypeHasSuffix(v string) predicate.State {
	return predicate.State(sql.FieldHasSuffix(FieldDatatype, v))
}

// DatatypeEqualFold applies the EqualFold predicate on the "datatype" field.
func DatatypeEqualFold(v string) predicate.State {
	return predicate.State(sql.FieldEqualFold(FieldDatatype, v))
}

// DatatypeContainsFold applies the ContainsFold predicate on the "datatype" field.
func DatatypeContainsFold(v string) predicate.State {
	return predicate.State(sql.FieldContainsFold(FieldDatatype, v))
}

// OperationEQ applies the EQ predicate on the "operation" field.
func OperationEQ(v string) predicate.State {
	return predicate.State(sql.FieldEQ(FieldOperation, v))
}

// OperationNEQ applies the NEQ predicate on the "operation" field.
func OperationNEQ(v string) predicate.State {
	return predicate.State(sql.FieldNEQ(FieldOperation, v))
}

// OperationIn applies the In predicate on the "operation" field.
func OperationIn(vs ...string) predicate.State {
	return predicate.State(sql.FieldIn(FieldOperation, vs...))
}

// OperationNotIn applies the NotIn predicate on the "operation" field.
func OperationNotIn(vs ...string) predicate.State {
	return predicate.State(sql.FieldNotIn(FieldOperation, vs...))
}

// OperationGT applies the GT predicate on the "operation" field.
func OperationGT(v string) predicate.State {
	return predicate.State(sql.FieldGT(FieldOperation, v))
}

// OperationGTE applies the GTE predicate on the "operation" field.
func OperationGTE(v string) predicate.State {
	return predicate.State(sql.FieldGTE(FieldOperation, v))
}

// OperationLT applies the LT predicate on the "operation" field.
func OperationLT(v string) predicate.State {
	return predicate.State(sql.FieldLT(FieldOperation, v))
}

// OperationLTE applies the LTE predicate on the "operation" field.
func OperationLTE(v string) predicate.State {
	return predicate.State(sql.FieldLTE(FieldOperation, v))
}

// OperationContains applies the Contains predicate on the "operation" field.
func OperationContains(v string) predicate.State {
	return predicate.State(sql.FieldContains(FieldOperation, v))
}

// OperationHasPrefix applies the HasPrefix predicate on the "operation" field.
func OperationHasPrefix(v string) predicate.State {
	return predicate.State(sql.FieldHasPrefix(FieldOperation, v))
}

// OperationHasSuffix applies the HasSuffix predicate on the "operation" field.
func OperationHasSuffix(v string) predicate.State {
	return predicate.State(sql.FieldHasSuffix(FieldOperation, v))
}

// OperationEqualFold applies the EqualFold predicate on the "operation" field.
func OperationEqualFold(v string) predicate.State {
	return predicate.State(sql.FieldEqualFold(FieldOperation, v))
}

// OperationContainsFold applies the ContainsFold predicate on the "operation" field.
func OperationContainsFold(v string) predicate.State {
	return predicate.State(sql.FieldContainsFold(FieldOperation, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.State) predicate.State {
	return predicate.State(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.State) predicate.State {
	return predicate.State(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.State) predicate.State {
	return predicate.State(sql.NotPredicates(p))
}
