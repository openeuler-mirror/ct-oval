// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"ct_oval_tool/pkg/ent/predicate"
	"ct_oval_tool/pkg/ent/state"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// StateUpdate is the builder for updating State entities.
type StateUpdate struct {
	config
	hooks    []Hook
	mutation *StateMutation
}

// Where appends a list predicates to the StateUpdate builder.
func (su *StateUpdate) Where(ps ...predicate.State) *StateUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetStateID sets the "state_id" field.
func (su *StateUpdate) SetStateID(s string) *StateUpdate {
	su.mutation.SetStateID(s)
	return su
}

// SetNillableStateID sets the "state_id" field if the given value is not nil.
func (su *StateUpdate) SetNillableStateID(s *string) *StateUpdate {
	if s != nil {
		su.SetStateID(*s)
	}
	return su
}

// SetValue sets the "value" field.
func (su *StateUpdate) SetValue(s string) *StateUpdate {
	su.mutation.SetValue(s)
	return su
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (su *StateUpdate) SetNillableValue(s *string) *StateUpdate {
	if s != nil {
		su.SetValue(*s)
	}
	return su
}

// SetTag sets the "tag" field.
func (su *StateUpdate) SetTag(s string) *StateUpdate {
	su.mutation.SetTag(s)
	return su
}

// SetNillableTag sets the "tag" field if the given value is not nil.
func (su *StateUpdate) SetNillableTag(s *string) *StateUpdate {
	if s != nil {
		su.SetTag(*s)
	}
	return su
}

// SetDatatype sets the "datatype" field.
func (su *StateUpdate) SetDatatype(s string) *StateUpdate {
	su.mutation.SetDatatype(s)
	return su
}

// SetNillableDatatype sets the "datatype" field if the given value is not nil.
func (su *StateUpdate) SetNillableDatatype(s *string) *StateUpdate {
	if s != nil {
		su.SetDatatype(*s)
	}
	return su
}

// SetOperation sets the "operation" field.
func (su *StateUpdate) SetOperation(s string) *StateUpdate {
	su.mutation.SetOperation(s)
	return su
}

// SetNillableOperation sets the "operation" field if the given value is not nil.
func (su *StateUpdate) SetNillableOperation(s *string) *StateUpdate {
	if s != nil {
		su.SetOperation(*s)
	}
	return su
}

// Mutation returns the StateMutation object of the builder.
func (su *StateUpdate) Mutation() *StateMutation {
	return su.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *StateUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *StateUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *StateUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *StateUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

func (su *StateUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(state.Table, state.Columns, sqlgraph.NewFieldSpec(state.FieldID, field.TypeInt))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.StateID(); ok {
		_spec.SetField(state.FieldStateID, field.TypeString, value)
	}
	if value, ok := su.mutation.Value(); ok {
		_spec.SetField(state.FieldValue, field.TypeString, value)
	}
	if value, ok := su.mutation.Tag(); ok {
		_spec.SetField(state.FieldTag, field.TypeString, value)
	}
	if value, ok := su.mutation.Datatype(); ok {
		_spec.SetField(state.FieldDatatype, field.TypeString, value)
	}
	if value, ok := su.mutation.Operation(); ok {
		_spec.SetField(state.FieldOperation, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{state.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// StateUpdateOne is the builder for updating a single State entity.
type StateUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *StateMutation
}

// SetStateID sets the "state_id" field.
func (suo *StateUpdateOne) SetStateID(s string) *StateUpdateOne {
	suo.mutation.SetStateID(s)
	return suo
}

// SetNillableStateID sets the "state_id" field if the given value is not nil.
func (suo *StateUpdateOne) SetNillableStateID(s *string) *StateUpdateOne {
	if s != nil {
		suo.SetStateID(*s)
	}
	return suo
}

// SetValue sets the "value" field.
func (suo *StateUpdateOne) SetValue(s string) *StateUpdateOne {
	suo.mutation.SetValue(s)
	return suo
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (suo *StateUpdateOne) SetNillableValue(s *string) *StateUpdateOne {
	if s != nil {
		suo.SetValue(*s)
	}
	return suo
}

// SetTag sets the "tag" field.
func (suo *StateUpdateOne) SetTag(s string) *StateUpdateOne {
	suo.mutation.SetTag(s)
	return suo
}

// SetNillableTag sets the "tag" field if the given value is not nil.
func (suo *StateUpdateOne) SetNillableTag(s *string) *StateUpdateOne {
	if s != nil {
		suo.SetTag(*s)
	}
	return suo
}

// SetDatatype sets the "datatype" field.
func (suo *StateUpdateOne) SetDatatype(s string) *StateUpdateOne {
	suo.mutation.SetDatatype(s)
	return suo
}

// SetNillableDatatype sets the "datatype" field if the given value is not nil.
func (suo *StateUpdateOne) SetNillableDatatype(s *string) *StateUpdateOne {
	if s != nil {
		suo.SetDatatype(*s)
	}
	return suo
}

// SetOperation sets the "operation" field.
func (suo *StateUpdateOne) SetOperation(s string) *StateUpdateOne {
	suo.mutation.SetOperation(s)
	return suo
}

// SetNillableOperation sets the "operation" field if the given value is not nil.
func (suo *StateUpdateOne) SetNillableOperation(s *string) *StateUpdateOne {
	if s != nil {
		suo.SetOperation(*s)
	}
	return suo
}

// Mutation returns the StateMutation object of the builder.
func (suo *StateUpdateOne) Mutation() *StateMutation {
	return suo.mutation
}

// Where appends a list predicates to the StateUpdate builder.
func (suo *StateUpdateOne) Where(ps ...predicate.State) *StateUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *StateUpdateOne) Select(field string, fields ...string) *StateUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated State entity.
func (suo *StateUpdateOne) Save(ctx context.Context) (*State, error) {
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *StateUpdateOne) SaveX(ctx context.Context) *State {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *StateUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *StateUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (suo *StateUpdateOne) sqlSave(ctx context.Context) (_node *State, err error) {
	_spec := sqlgraph.NewUpdateSpec(state.Table, state.Columns, sqlgraph.NewFieldSpec(state.FieldID, field.TypeInt))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "State.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, state.FieldID)
		for _, f := range fields {
			if !state.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != state.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.StateID(); ok {
		_spec.SetField(state.FieldStateID, field.TypeString, value)
	}
	if value, ok := suo.mutation.Value(); ok {
		_spec.SetField(state.FieldValue, field.TypeString, value)
	}
	if value, ok := suo.mutation.Tag(); ok {
		_spec.SetField(state.FieldTag, field.TypeString, value)
	}
	if value, ok := suo.mutation.Datatype(); ok {
		_spec.SetField(state.FieldDatatype, field.TypeString, value)
	}
	if value, ok := suo.mutation.Operation(); ok {
		_spec.SetField(state.FieldOperation, field.TypeString, value)
	}
	_node = &State{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{state.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
