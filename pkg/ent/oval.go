// Code generated by ent, DO NOT EDIT.

package ent

import (
	"ct_oval_tool/pkg/ent/oval"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Oval is the model entity for the Oval schema.
type Oval struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Productname holds the value of the "productname" field.
	Productname string `json:"productname,omitempty"`
	// Productversion holds the value of the "productversion" field.
	Productversion string `json:"productversion,omitempty"`
	// Schemaversion holds the value of the "schemaversion" field.
	Schemaversion string `json:"schemaversion,omitempty"`
	// Ovalversion holds the value of the "ovalversion" field.
	Ovalversion string `json:"ovalversion,omitempty"`
	// Class holds the value of the "class" field.
	Class string `json:"class,omitempty"`
	// Family holds the value of the "family" field.
	Family string `json:"family,omitempty"`
	// Copyright holds the value of the "copyright" field.
	Copyright string `json:"copyright,omitempty"`
	// Timestamp holds the value of the "timestamp" field.
	Timestamp string `json:"timestamp,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Severity holds the value of the "severity" field.
	Severity string `json:"severity,omitempty"`
	// Issuedate holds the value of the "issuedate" field.
	Issuedate string `json:"issuedate,omitempty"`
	// Platform holds the value of the "platform" field.
	Platform string `json:"platform,omitempty"`
	// ArchList holds the value of the "arch_list" field.
	ArchList string `json:"arch_list,omitempty"`
	// CveList holds the value of the "cve_list" field.
	CveList string `json:"cve_list,omitempty"`
	// TestList holds the value of the "test_list" field.
	TestList string `json:"test_list,omitempty"`
	// ObjectList holds the value of the "object_list" field.
	ObjectList string `json:"object_list,omitempty"`
	// StateList holds the value of the "state_list" field.
	StateList    string `json:"state_list,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Oval) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case oval.FieldID, oval.FieldProductname, oval.FieldProductversion, oval.FieldSchemaversion, oval.FieldOvalversion, oval.FieldClass, oval.FieldFamily, oval.FieldCopyright, oval.FieldTimestamp, oval.FieldTitle, oval.FieldDescription, oval.FieldSeverity, oval.FieldIssuedate, oval.FieldPlatform, oval.FieldArchList, oval.FieldCveList, oval.FieldTestList, oval.FieldObjectList, oval.FieldStateList:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Oval fields.
func (o *Oval) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case oval.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				o.ID = value.String
			}
		case oval.FieldProductname:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field productname", values[i])
			} else if value.Valid {
				o.Productname = value.String
			}
		case oval.FieldProductversion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field productversion", values[i])
			} else if value.Valid {
				o.Productversion = value.String
			}
		case oval.FieldSchemaversion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field schemaversion", values[i])
			} else if value.Valid {
				o.Schemaversion = value.String
			}
		case oval.FieldOvalversion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ovalversion", values[i])
			} else if value.Valid {
				o.Ovalversion = value.String
			}
		case oval.FieldClass:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field class", values[i])
			} else if value.Valid {
				o.Class = value.String
			}
		case oval.FieldFamily:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field family", values[i])
			} else if value.Valid {
				o.Family = value.String
			}
		case oval.FieldCopyright:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field copyright", values[i])
			} else if value.Valid {
				o.Copyright = value.String
			}
		case oval.FieldTimestamp:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field timestamp", values[i])
			} else if value.Valid {
				o.Timestamp = value.String
			}
		case oval.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				o.Title = value.String
			}
		case oval.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				o.Description = value.String
			}
		case oval.FieldSeverity:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field severity", values[i])
			} else if value.Valid {
				o.Severity = value.String
			}
		case oval.FieldIssuedate:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field issuedate", values[i])
			} else if value.Valid {
				o.Issuedate = value.String
			}
		case oval.FieldPlatform:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field platform", values[i])
			} else if value.Valid {
				o.Platform = value.String
			}
		case oval.FieldArchList:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field arch_list", values[i])
			} else if value.Valid {
				o.ArchList = value.String
			}
		case oval.FieldCveList:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field cve_list", values[i])
			} else if value.Valid {
				o.CveList = value.String
			}
		case oval.FieldTestList:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field test_list", values[i])
			} else if value.Valid {
				o.TestList = value.String
			}
		case oval.FieldObjectList:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field object_list", values[i])
			} else if value.Valid {
				o.ObjectList = value.String
			}
		case oval.FieldStateList:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field state_list", values[i])
			} else if value.Valid {
				o.StateList = value.String
			}
		default:
			o.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Oval.
// This includes values selected through modifiers, order, etc.
func (o *Oval) Value(name string) (ent.Value, error) {
	return o.selectValues.Get(name)
}

// Update returns a builder for updating this Oval.
// Note that you need to call Oval.Unwrap() before calling this method if this Oval
// was returned from a transaction, and the transaction was committed or rolled back.
func (o *Oval) Update() *OvalUpdateOne {
	return NewOvalClient(o.config).UpdateOne(o)
}

// Unwrap unwraps the Oval entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (o *Oval) Unwrap() *Oval {
	_tx, ok := o.config.driver.(*txDriver)
	if !ok {
		panic("ent: Oval is not a transactional entity")
	}
	o.config.driver = _tx.drv
	return o
}

// String implements the fmt.Stringer.
func (o *Oval) String() string {
	var builder strings.Builder
	builder.WriteString("Oval(")
	builder.WriteString(fmt.Sprintf("id=%v, ", o.ID))
	builder.WriteString("productname=")
	builder.WriteString(o.Productname)
	builder.WriteString(", ")
	builder.WriteString("productversion=")
	builder.WriteString(o.Productversion)
	builder.WriteString(", ")
	builder.WriteString("schemaversion=")
	builder.WriteString(o.Schemaversion)
	builder.WriteString(", ")
	builder.WriteString("ovalversion=")
	builder.WriteString(o.Ovalversion)
	builder.WriteString(", ")
	builder.WriteString("class=")
	builder.WriteString(o.Class)
	builder.WriteString(", ")
	builder.WriteString("family=")
	builder.WriteString(o.Family)
	builder.WriteString(", ")
	builder.WriteString("copyright=")
	builder.WriteString(o.Copyright)
	builder.WriteString(", ")
	builder.WriteString("timestamp=")
	builder.WriteString(o.Timestamp)
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(o.Title)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(o.Description)
	builder.WriteString(", ")
	builder.WriteString("severity=")
	builder.WriteString(o.Severity)
	builder.WriteString(", ")
	builder.WriteString("issuedate=")
	builder.WriteString(o.Issuedate)
	builder.WriteString(", ")
	builder.WriteString("platform=")
	builder.WriteString(o.Platform)
	builder.WriteString(", ")
	builder.WriteString("arch_list=")
	builder.WriteString(o.ArchList)
	builder.WriteString(", ")
	builder.WriteString("cve_list=")
	builder.WriteString(o.CveList)
	builder.WriteString(", ")
	builder.WriteString("test_list=")
	builder.WriteString(o.TestList)
	builder.WriteString(", ")
	builder.WriteString("object_list=")
	builder.WriteString(o.ObjectList)
	builder.WriteString(", ")
	builder.WriteString("state_list=")
	builder.WriteString(o.StateList)
	builder.WriteByte(')')
	return builder.String()
}

// Ovals is a parsable slice of Oval.
type Ovals []*Oval
