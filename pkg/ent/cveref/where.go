// Code generated by ent, DO NOT EDIT.

package cveref

import (
	"ct_oval_tool/pkg/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Cveref {
	return predicate.Cveref(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Cveref {
	return predicate.Cveref(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Cveref {
	return predicate.Cveref(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Cveref {
	return predicate.Cveref(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Cveref {
	return predicate.Cveref(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Cveref {
	return predicate.Cveref(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Cveref {
	return predicate.Cveref(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Cveref {
	return predicate.Cveref(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Cveref {
	return predicate.Cveref(sql.FieldLTE(FieldID, id))
}

// RefID applies equality check predicate on the "ref_id" field. It's identical to RefIDEQ.
func RefID(v string) predicate.Cveref {
	return predicate.Cveref(sql.FieldEQ(FieldRefID, v))
}

// RefURL applies equality check predicate on the "ref_url" field. It's identical to RefURLEQ.
func RefURL(v string) predicate.Cveref {
	return predicate.Cveref(sql.FieldEQ(FieldRefURL, v))
}

// RefIDEQ applies the EQ predicate on the "ref_id" field.
func RefIDEQ(v string) predicate.Cveref {
	return predicate.Cveref(sql.FieldEQ(FieldRefID, v))
}

// RefIDNEQ applies the NEQ predicate on the "ref_id" field.
func RefIDNEQ(v string) predicate.Cveref {
	return predicate.Cveref(sql.FieldNEQ(FieldRefID, v))
}

// RefIDIn applies the In predicate on the "ref_id" field.
func RefIDIn(vs ...string) predicate.Cveref {
	return predicate.Cveref(sql.FieldIn(FieldRefID, vs...))
}

// RefIDNotIn applies the NotIn predicate on the "ref_id" field.
func RefIDNotIn(vs ...string) predicate.Cveref {
	return predicate.Cveref(sql.FieldNotIn(FieldRefID, vs...))
}

// RefIDGT applies the GT predicate on the "ref_id" field.
func RefIDGT(v string) predicate.Cveref {
	return predicate.Cveref(sql.FieldGT(FieldRefID, v))
}

// RefIDGTE applies the GTE predicate on the "ref_id" field.
func RefIDGTE(v string) predicate.Cveref {
	return predicate.Cveref(sql.FieldGTE(FieldRefID, v))
}

// RefIDLT applies the LT predicate on the "ref_id" field.
func RefIDLT(v string) predicate.Cveref {
	return predicate.Cveref(sql.FieldLT(FieldRefID, v))
}

// RefIDLTE applies the LTE predicate on the "ref_id" field.
func RefIDLTE(v string) predicate.Cveref {
	return predicate.Cveref(sql.FieldLTE(FieldRefID, v))
}

// RefIDContains applies the Contains predicate on the "ref_id" field.
func RefIDContains(v string) predicate.Cveref {
	return predicate.Cveref(sql.FieldContains(FieldRefID, v))
}

// RefIDHasPrefix applies the HasPrefix predicate on the "ref_id" field.
func RefIDHasPrefix(v string) predicate.Cveref {
	return predicate.Cveref(sql.FieldHasPrefix(FieldRefID, v))
}

// RefIDHasSuffix applies the HasSuffix predicate on the "ref_id" field.
func RefIDHasSuffix(v string) predicate.Cveref {
	return predicate.Cveref(sql.FieldHasSuffix(FieldRefID, v))
}

// RefIDEqualFold applies the EqualFold predicate on the "ref_id" field.
func RefIDEqualFold(v string) predicate.Cveref {
	return predicate.Cveref(sql.FieldEqualFold(FieldRefID, v))
}

// RefIDContainsFold applies the ContainsFold predicate on the "ref_id" field.
func RefIDContainsFold(v string) predicate.Cveref {
	return predicate.Cveref(sql.FieldContainsFold(FieldRefID, v))
}

// RefURLEQ applies the EQ predicate on the "ref_url" field.
func RefURLEQ(v string) predicate.Cveref {
	return predicate.Cveref(sql.FieldEQ(FieldRefURL, v))
}

// RefURLNEQ applies the NEQ predicate on the "ref_url" field.
func RefURLNEQ(v string) predicate.Cveref {
	return predicate.Cveref(sql.FieldNEQ(FieldRefURL, v))
}

// RefURLIn applies the In predicate on the "ref_url" field.
func RefURLIn(vs ...string) predicate.Cveref {
	return predicate.Cveref(sql.FieldIn(FieldRefURL, vs...))
}

// RefURLNotIn applies the NotIn predicate on the "ref_url" field.
func RefURLNotIn(vs ...string) predicate.Cveref {
	return predicate.Cveref(sql.FieldNotIn(FieldRefURL, vs...))
}

// RefURLGT applies the GT predicate on the "ref_url" field.
func RefURLGT(v string) predicate.Cveref {
	return predicate.Cveref(sql.FieldGT(FieldRefURL, v))
}

// RefURLGTE applies the GTE predicate on the "ref_url" field.
func RefURLGTE(v string) predicate.Cveref {
	return predicate.Cveref(sql.FieldGTE(FieldRefURL, v))
}

// RefURLLT applies the LT predicate on the "ref_url" field.
func RefURLLT(v string) predicate.Cveref {
	return predicate.Cveref(sql.FieldLT(FieldRefURL, v))
}

// RefURLLTE applies the LTE predicate on the "ref_url" field.
func RefURLLTE(v string) predicate.Cveref {
	return predicate.Cveref(sql.FieldLTE(FieldRefURL, v))
}

// RefURLContains applies the Contains predicate on the "ref_url" field.
func RefURLContains(v string) predicate.Cveref {
	return predicate.Cveref(sql.FieldContains(FieldRefURL, v))
}

// RefURLHasPrefix applies the HasPrefix predicate on the "ref_url" field.
func RefURLHasPrefix(v string) predicate.Cveref {
	return predicate.Cveref(sql.FieldHasPrefix(FieldRefURL, v))
}

// RefURLHasSuffix applies the HasSuffix predicate on the "ref_url" field.
func RefURLHasSuffix(v string) predicate.Cveref {
	return predicate.Cveref(sql.FieldHasSuffix(FieldRefURL, v))
}

// RefURLEqualFold applies the EqualFold predicate on the "ref_url" field.
func RefURLEqualFold(v string) predicate.Cveref {
	return predicate.Cveref(sql.FieldEqualFold(FieldRefURL, v))
}

// RefURLContainsFold applies the ContainsFold predicate on the "ref_url" field.
func RefURLContainsFold(v string) predicate.Cveref {
	return predicate.Cveref(sql.FieldContainsFold(FieldRefURL, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Cveref) predicate.Cveref {
	return predicate.Cveref(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Cveref) predicate.Cveref {
	return predicate.Cveref(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Cveref) predicate.Cveref {
	return predicate.Cveref(sql.NotPredicates(p))
}
