// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"ct_oval_tool/pkg/ent/state"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// StateCreate is the builder for creating a State entity.
type StateCreate struct {
	config
	mutation *StateMutation
	hooks    []Hook
}

// SetStateID sets the "state_id" field.
func (sc *StateCreate) SetStateID(s string) *StateCreate {
	sc.mutation.SetStateID(s)
	return sc
}

// SetValue sets the "value" field.
func (sc *StateCreate) SetValue(s string) *StateCreate {
	sc.mutation.SetValue(s)
	return sc
}

// SetTag sets the "tag" field.
func (sc *StateCreate) SetTag(s string) *StateCreate {
	sc.mutation.SetTag(s)
	return sc
}

// SetDatatype sets the "datatype" field.
func (sc *StateCreate) SetDatatype(s string) *StateCreate {
	sc.mutation.SetDatatype(s)
	return sc
}

// SetOperation sets the "operation" field.
func (sc *StateCreate) SetOperation(s string) *StateCreate {
	sc.mutation.SetOperation(s)
	return sc
}

// Mutation returns the StateMutation object of the builder.
func (sc *StateCreate) Mutation() *StateMutation {
	return sc.mutation
}

// Save creates the State in the database.
func (sc *StateCreate) Save(ctx context.Context) (*State, error) {
	return withHooks(ctx, sc.sqlSave, sc.mutation, sc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *StateCreate) SaveX(ctx context.Context) *State {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *StateCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *StateCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *StateCreate) check() error {
	if _, ok := sc.mutation.StateID(); !ok {
		return &ValidationError{Name: "state_id", err: errors.New(`ent: missing required field "State.state_id"`)}
	}
	if _, ok := sc.mutation.Value(); !ok {
		return &ValidationError{Name: "value", err: errors.New(`ent: missing required field "State.value"`)}
	}
	if _, ok := sc.mutation.Tag(); !ok {
		return &ValidationError{Name: "tag", err: errors.New(`ent: missing required field "State.tag"`)}
	}
	if _, ok := sc.mutation.Datatype(); !ok {
		return &ValidationError{Name: "datatype", err: errors.New(`ent: missing required field "State.datatype"`)}
	}
	if _, ok := sc.mutation.Operation(); !ok {
		return &ValidationError{Name: "operation", err: errors.New(`ent: missing required field "State.operation"`)}
	}
	return nil
}

func (sc *StateCreate) sqlSave(ctx context.Context) (*State, error) {
	if err := sc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	sc.mutation.id = &_node.ID
	sc.mutation.done = true
	return _node, nil
}

func (sc *StateCreate) createSpec() (*State, *sqlgraph.CreateSpec) {
	var (
		_node = &State{config: sc.config}
		_spec = sqlgraph.NewCreateSpec(state.Table, sqlgraph.NewFieldSpec(state.FieldID, field.TypeInt))
	)
	if value, ok := sc.mutation.StateID(); ok {
		_spec.SetField(state.FieldStateID, field.TypeString, value)
		_node.StateID = value
	}
	if value, ok := sc.mutation.Value(); ok {
		_spec.SetField(state.FieldValue, field.TypeString, value)
		_node.Value = value
	}
	if value, ok := sc.mutation.Tag(); ok {
		_spec.SetField(state.FieldTag, field.TypeString, value)
		_node.Tag = value
	}
	if value, ok := sc.mutation.Datatype(); ok {
		_spec.SetField(state.FieldDatatype, field.TypeString, value)
		_node.Datatype = value
	}
	if value, ok := sc.mutation.Operation(); ok {
		_spec.SetField(state.FieldOperation, field.TypeString, value)
		_node.Operation = value
	}
	return _node, _spec
}

// StateCreateBulk is the builder for creating many State entities in bulk.
type StateCreateBulk struct {
	config
	err      error
	builders []*StateCreate
}

// Save creates the State entities in the database.
func (scb *StateCreateBulk) Save(ctx context.Context) ([]*State, error) {
	if scb.err != nil {
		return nil, scb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*State, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*StateMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *StateCreateBulk) SaveX(ctx context.Context) []*State {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *StateCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *StateCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}
