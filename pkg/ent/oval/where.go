// Code generated by ent, DO NOT EDIT.

package oval

import (
	"ct_oval_tool/pkg/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Oval {
	return predicate.Oval(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Oval {
	return predicate.Oval(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Oval {
	return predicate.Oval(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Oval {
	return predicate.Oval(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Oval {
	return predicate.Oval(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Oval {
	return predicate.Oval(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Oval {
	return predicate.Oval(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Oval {
	return predicate.Oval(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Oval {
	return predicate.Oval(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Oval {
	return predicate.Oval(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Oval {
	return predicate.Oval(sql.FieldContainsFold(FieldID, id))
}

// Productname applies equality check predicate on the "productname" field. It's identical to ProductnameEQ.
func Productname(v string) predicate.Oval {
	return predicate.Oval(sql.FieldEQ(FieldProductname, v))
}

// Productversion applies equality check predicate on the "productversion" field. It's identical to ProductversionEQ.
func Productversion(v string) predicate.Oval {
	return predicate.Oval(sql.FieldEQ(FieldProductversion, v))
}

// Schemaversion applies equality check predicate on the "schemaversion" field. It's identical to SchemaversionEQ.
func Schemaversion(v string) predicate.Oval {
	return predicate.Oval(sql.FieldEQ(FieldSchemaversion, v))
}

// Ovalversion applies equality check predicate on the "ovalversion" field. It's identical to OvalversionEQ.
func Ovalversion(v string) predicate.Oval {
	return predicate.Oval(sql.FieldEQ(FieldOvalversion, v))
}

// Class applies equality check predicate on the "class" field. It's identical to ClassEQ.
func Class(v string) predicate.Oval {
	return predicate.Oval(sql.FieldEQ(FieldClass, v))
}

// Family applies equality check predicate on the "family" field. It's identical to FamilyEQ.
func Family(v string) predicate.Oval {
	return predicate.Oval(sql.FieldEQ(FieldFamily, v))
}

// Copyright applies equality check predicate on the "copyright" field. It's identical to CopyrightEQ.
func Copyright(v string) predicate.Oval {
	return predicate.Oval(sql.FieldEQ(FieldCopyright, v))
}

// Timestamp applies equality check predicate on the "timestamp" field. It's identical to TimestampEQ.
func Timestamp(v string) predicate.Oval {
	return predicate.Oval(sql.FieldEQ(FieldTimestamp, v))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.Oval {
	return predicate.Oval(sql.FieldEQ(FieldTitle, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Oval {
	return predicate.Oval(sql.FieldEQ(FieldDescription, v))
}

// Severity applies equality check predicate on the "severity" field. It's identical to SeverityEQ.
func Severity(v string) predicate.Oval {
	return predicate.Oval(sql.FieldEQ(FieldSeverity, v))
}

// Issuedate applies equality check predicate on the "issuedate" field. It's identical to IssuedateEQ.
func Issuedate(v string) predicate.Oval {
	return predicate.Oval(sql.FieldEQ(FieldIssuedate, v))
}

// Platform applies equality check predicate on the "platform" field. It's identical to PlatformEQ.
func Platform(v string) predicate.Oval {
	return predicate.Oval(sql.FieldEQ(FieldPlatform, v))
}

// ArchList applies equality check predicate on the "arch_list" field. It's identical to ArchListEQ.
func ArchList(v string) predicate.Oval {
	return predicate.Oval(sql.FieldEQ(FieldArchList, v))
}

// CveList applies equality check predicate on the "cve_list" field. It's identical to CveListEQ.
func CveList(v string) predicate.Oval {
	return predicate.Oval(sql.FieldEQ(FieldCveList, v))
}

// TestList applies equality check predicate on the "test_list" field. It's identical to TestListEQ.
func TestList(v string) predicate.Oval {
	return predicate.Oval(sql.FieldEQ(FieldTestList, v))
}

// ObjectList applies equality check predicate on the "object_list" field. It's identical to ObjectListEQ.
func ObjectList(v string) predicate.Oval {
	return predicate.Oval(sql.FieldEQ(FieldObjectList, v))
}

// StateList applies equality check predicate on the "state_list" field. It's identical to StateListEQ.
func StateList(v string) predicate.Oval {
	return predicate.Oval(sql.FieldEQ(FieldStateList, v))
}

// ProductnameEQ applies the EQ predicate on the "productname" field.
func ProductnameEQ(v string) predicate.Oval {
	return predicate.Oval(sql.FieldEQ(FieldProductname, v))
}

// ProductnameNEQ applies the NEQ predicate on the "productname" field.
func ProductnameNEQ(v string) predicate.Oval {
	return predicate.Oval(sql.FieldNEQ(FieldProductname, v))
}

// ProductnameIn applies the In predicate on the "productname" field.
func ProductnameIn(vs ...string) predicate.Oval {
	return predicate.Oval(sql.FieldIn(FieldProductname, vs...))
}

// ProductnameNotIn applies the NotIn predicate on the "productname" field.
func ProductnameNotIn(vs ...string) predicate.Oval {
	return predicate.Oval(sql.FieldNotIn(FieldProductname, vs...))
}

// ProductnameGT applies the GT predicate on the "productname" field.
func ProductnameGT(v string) predicate.Oval {
	return predicate.Oval(sql.FieldGT(FieldProductname, v))
}

// ProductnameGTE applies the GTE predicate on the "productname" field.
func ProductnameGTE(v string) predicate.Oval {
	return predicate.Oval(sql.FieldGTE(FieldProductname, v))
}

// ProductnameLT applies the LT predicate on the "productname" field.
func ProductnameLT(v string) predicate.Oval {
	return predicate.Oval(sql.FieldLT(FieldProductname, v))
}

// ProductnameLTE applies the LTE predicate on the "productname" field.
func ProductnameLTE(v string) predicate.Oval {
	return predicate.Oval(sql.FieldLTE(FieldProductname, v))
}

// ProductnameContains applies the Contains predicate on the "productname" field.
func ProductnameContains(v string) predicate.Oval {
	return predicate.Oval(sql.FieldContains(FieldProductname, v))
}

// ProductnameHasPrefix applies the HasPrefix predicate on the "productname" field.
func ProductnameHasPrefix(v string) predicate.Oval {
	return predicate.Oval(sql.FieldHasPrefix(FieldProductname, v))
}

// ProductnameHasSuffix applies the HasSuffix predicate on the "productname" field.
func ProductnameHasSuffix(v string) predicate.Oval {
	return predicate.Oval(sql.FieldHasSuffix(FieldProductname, v))
}

// ProductnameEqualFold applies the EqualFold predicate on the "productname" field.
func ProductnameEqualFold(v string) predicate.Oval {
	return predicate.Oval(sql.FieldEqualFold(FieldProductname, v))
}

// ProductnameContainsFold applies the ContainsFold predicate on the "productname" field.
func ProductnameContainsFold(v string) predicate.Oval {
	return predicate.Oval(sql.FieldContainsFold(FieldProductname, v))
}

// ProductversionEQ applies the EQ predicate on the "productversion" field.
func ProductversionEQ(v string) predicate.Oval {
	return predicate.Oval(sql.FieldEQ(FieldProductversion, v))
}

// ProductversionNEQ applies the NEQ predicate on the "productversion" field.
func ProductversionNEQ(v string) predicate.Oval {
	return predicate.Oval(sql.FieldNEQ(FieldProductversion, v))
}

// ProductversionIn applies the In predicate on the "productversion" field.
func ProductversionIn(vs ...string) predicate.Oval {
	return predicate.Oval(sql.FieldIn(FieldProductversion, vs...))
}

// ProductversionNotIn applies the NotIn predicate on the "productversion" field.
func ProductversionNotIn(vs ...string) predicate.Oval {
	return predicate.Oval(sql.FieldNotIn(FieldProductversion, vs...))
}

// ProductversionGT applies the GT predicate on the "productversion" field.
func ProductversionGT(v string) predicate.Oval {
	return predicate.Oval(sql.FieldGT(FieldProductversion, v))
}

// ProductversionGTE applies the GTE predicate on the "productversion" field.
func ProductversionGTE(v string) predicate.Oval {
	return predicate.Oval(sql.FieldGTE(FieldProductversion, v))
}

// ProductversionLT applies the LT predicate on the "productversion" field.
func ProductversionLT(v string) predicate.Oval {
	return predicate.Oval(sql.FieldLT(FieldProductversion, v))
}

// ProductversionLTE applies the LTE predicate on the "productversion" field.
func ProductversionLTE(v string) predicate.Oval {
	return predicate.Oval(sql.FieldLTE(FieldProductversion, v))
}

// ProductversionContains applies the Contains predicate on the "productversion" field.
func ProductversionContains(v string) predicate.Oval {
	return predicate.Oval(sql.FieldContains(FieldProductversion, v))
}

// ProductversionHasPrefix applies the HasPrefix predicate on the "productversion" field.
func ProductversionHasPrefix(v string) predicate.Oval {
	return predicate.Oval(sql.FieldHasPrefix(FieldProductversion, v))
}

// ProductversionHasSuffix applies the HasSuffix predicate on the "productversion" field.
func ProductversionHasSuffix(v string) predicate.Oval {
	return predicate.Oval(sql.FieldHasSuffix(FieldProductversion, v))
}

// ProductversionEqualFold applies the EqualFold predicate on the "productversion" field.
func ProductversionEqualFold(v string) predicate.Oval {
	return predicate.Oval(sql.FieldEqualFold(FieldProductversion, v))
}

// ProductversionContainsFold applies the ContainsFold predicate on the "productversion" field.
func ProductversionContainsFold(v string) predicate.Oval {
	return predicate.Oval(sql.FieldContainsFold(FieldProductversion, v))
}

// SchemaversionEQ applies the EQ predicate on the "schemaversion" field.
func SchemaversionEQ(v string) predicate.Oval {
	return predicate.Oval(sql.FieldEQ(FieldSchemaversion, v))
}

// SchemaversionNEQ applies the NEQ predicate on the "schemaversion" field.
func SchemaversionNEQ(v string) predicate.Oval {
	return predicate.Oval(sql.FieldNEQ(FieldSchemaversion, v))
}

// SchemaversionIn applies the In predicate on the "schemaversion" field.
func SchemaversionIn(vs ...string) predicate.Oval {
	return predicate.Oval(sql.FieldIn(FieldSchemaversion, vs...))
}

// SchemaversionNotIn applies the NotIn predicate on the "schemaversion" field.
func SchemaversionNotIn(vs ...string) predicate.Oval {
	return predicate.Oval(sql.FieldNotIn(FieldSchemaversion, vs...))
}

// SchemaversionGT applies the GT predicate on the "schemaversion" field.
func SchemaversionGT(v string) predicate.Oval {
	return predicate.Oval(sql.FieldGT(FieldSchemaversion, v))
}

// SchemaversionGTE applies the GTE predicate on the "schemaversion" field.
func SchemaversionGTE(v string) predicate.Oval {
	return predicate.Oval(sql.FieldGTE(FieldSchemaversion, v))
}

// SchemaversionLT applies the LT predicate on the "schemaversion" field.
func SchemaversionLT(v string) predicate.Oval {
	return predicate.Oval(sql.FieldLT(FieldSchemaversion, v))
}

// SchemaversionLTE applies the LTE predicate on the "schemaversion" field.
func SchemaversionLTE(v string) predicate.Oval {
	return predicate.Oval(sql.FieldLTE(FieldSchemaversion, v))
}

// SchemaversionContains applies the Contains predicate on the "schemaversion" field.
func SchemaversionContains(v string) predicate.Oval {
	return predicate.Oval(sql.FieldContains(FieldSchemaversion, v))
}

// SchemaversionHasPrefix applies the HasPrefix predicate on the "schemaversion" field.
func SchemaversionHasPrefix(v string) predicate.Oval {
	return predicate.Oval(sql.FieldHasPrefix(FieldSchemaversion, v))
}

// SchemaversionHasSuffix applies the HasSuffix predicate on the "schemaversion" field.
func SchemaversionHasSuffix(v string) predicate.Oval {
	return predicate.Oval(sql.FieldHasSuffix(FieldSchemaversion, v))
}

// SchemaversionEqualFold applies the EqualFold predicate on the "schemaversion" field.
func SchemaversionEqualFold(v string) predicate.Oval {
	return predicate.Oval(sql.FieldEqualFold(FieldSchemaversion, v))
}

// SchemaversionContainsFold applies the ContainsFold predicate on the "schemaversion" field.
func SchemaversionContainsFold(v string) predicate.Oval {
	return predicate.Oval(sql.FieldContainsFold(FieldSchemaversion, v))
}

// OvalversionEQ applies the EQ predicate on the "ovalversion" field.
func OvalversionEQ(v string) predicate.Oval {
	return predicate.Oval(sql.FieldEQ(FieldOvalversion, v))
}

// OvalversionNEQ applies the NEQ predicate on the "ovalversion" field.
func OvalversionNEQ(v string) predicate.Oval {
	return predicate.Oval(sql.FieldNEQ(FieldOvalversion, v))
}

// OvalversionIn applies the In predicate on the "ovalversion" field.
func OvalversionIn(vs ...string) predicate.Oval {
	return predicate.Oval(sql.FieldIn(FieldOvalversion, vs...))
}

// OvalversionNotIn applies the NotIn predicate on the "ovalversion" field.
func OvalversionNotIn(vs ...string) predicate.Oval {
	return predicate.Oval(sql.FieldNotIn(FieldOvalversion, vs...))
}

// OvalversionGT applies the GT predicate on the "ovalversion" field.
func OvalversionGT(v string) predicate.Oval {
	return predicate.Oval(sql.FieldGT(FieldOvalversion, v))
}

// OvalversionGTE applies the GTE predicate on the "ovalversion" field.
func OvalversionGTE(v string) predicate.Oval {
	return predicate.Oval(sql.FieldGTE(FieldOvalversion, v))
}

// OvalversionLT applies the LT predicate on the "ovalversion" field.
func OvalversionLT(v string) predicate.Oval {
	return predicate.Oval(sql.FieldLT(FieldOvalversion, v))
}

// OvalversionLTE applies the LTE predicate on the "ovalversion" field.
func OvalversionLTE(v string) predicate.Oval {
	return predicate.Oval(sql.FieldLTE(FieldOvalversion, v))
}

// OvalversionContains applies the Contains predicate on the "ovalversion" field.
func OvalversionContains(v string) predicate.Oval {
	return predicate.Oval(sql.FieldContains(FieldOvalversion, v))
}

// OvalversionHasPrefix applies the HasPrefix predicate on the "ovalversion" field.
func OvalversionHasPrefix(v string) predicate.Oval {
	return predicate.Oval(sql.FieldHasPrefix(FieldOvalversion, v))
}

// OvalversionHasSuffix applies the HasSuffix predicate on the "ovalversion" field.
func OvalversionHasSuffix(v string) predicate.Oval {
	return predicate.Oval(sql.FieldHasSuffix(FieldOvalversion, v))
}

// OvalversionEqualFold applies the EqualFold predicate on the "ovalversion" field.
func OvalversionEqualFold(v string) predicate.Oval {
	return predicate.Oval(sql.FieldEqualFold(FieldOvalversion, v))
}

// OvalversionContainsFold applies the ContainsFold predicate on the "ovalversion" field.
func OvalversionContainsFold(v string) predicate.Oval {
	return predicate.Oval(sql.FieldContainsFold(FieldOvalversion, v))
}

// ClassEQ applies the EQ predicate on the "class" field.
func ClassEQ(v string) predicate.Oval {
	return predicate.Oval(sql.FieldEQ(FieldClass, v))
}

// ClassNEQ applies the NEQ predicate on the "class" field.
func ClassNEQ(v string) predicate.Oval {
	return predicate.Oval(sql.FieldNEQ(FieldClass, v))
}

// ClassIn applies the In predicate on the "class" field.
func ClassIn(vs ...string) predicate.Oval {
	return predicate.Oval(sql.FieldIn(FieldClass, vs...))
}

// ClassNotIn applies the NotIn predicate on the "class" field.
func ClassNotIn(vs ...string) predicate.Oval {
	return predicate.Oval(sql.FieldNotIn(FieldClass, vs...))
}

// ClassGT applies the GT predicate on the "class" field.
func ClassGT(v string) predicate.Oval {
	return predicate.Oval(sql.FieldGT(FieldClass, v))
}

// ClassGTE applies the GTE predicate on the "class" field.
func ClassGTE(v string) predicate.Oval {
	return predicate.Oval(sql.FieldGTE(FieldClass, v))
}

// ClassLT applies the LT predicate on the "class" field.
func ClassLT(v string) predicate.Oval {
	return predicate.Oval(sql.FieldLT(FieldClass, v))
}

// ClassLTE applies the LTE predicate on the "class" field.
func ClassLTE(v string) predicate.Oval {
	return predicate.Oval(sql.FieldLTE(FieldClass, v))
}

// ClassContains applies the Contains predicate on the "class" field.
func ClassContains(v string) predicate.Oval {
	return predicate.Oval(sql.FieldContains(FieldClass, v))
}

// ClassHasPrefix applies the HasPrefix predicate on the "class" field.
func ClassHasPrefix(v string) predicate.Oval {
	return predicate.Oval(sql.FieldHasPrefix(FieldClass, v))
}

// ClassHasSuffix applies the HasSuffix predicate on the "class" field.
func ClassHasSuffix(v string) predicate.Oval {
	return predicate.Oval(sql.FieldHasSuffix(FieldClass, v))
}

// ClassEqualFold applies the EqualFold predicate on the "class" field.
func ClassEqualFold(v string) predicate.Oval {
	return predicate.Oval(sql.FieldEqualFold(FieldClass, v))
}

// ClassContainsFold applies the ContainsFold predicate on the "class" field.
func ClassContainsFold(v string) predicate.Oval {
	return predicate.Oval(sql.FieldContainsFold(FieldClass, v))
}

// FamilyEQ applies the EQ predicate on the "family" field.
func FamilyEQ(v string) predicate.Oval {
	return predicate.Oval(sql.FieldEQ(FieldFamily, v))
}

// FamilyNEQ applies the NEQ predicate on the "family" field.
func FamilyNEQ(v string) predicate.Oval {
	return predicate.Oval(sql.FieldNEQ(FieldFamily, v))
}

// FamilyIn applies the In predicate on the "family" field.
func FamilyIn(vs ...string) predicate.Oval {
	return predicate.Oval(sql.FieldIn(FieldFamily, vs...))
}

// FamilyNotIn applies the NotIn predicate on the "family" field.
func FamilyNotIn(vs ...string) predicate.Oval {
	return predicate.Oval(sql.FieldNotIn(FieldFamily, vs...))
}

// FamilyGT applies the GT predicate on the "family" field.
func FamilyGT(v string) predicate.Oval {
	return predicate.Oval(sql.FieldGT(FieldFamily, v))
}

// FamilyGTE applies the GTE predicate on the "family" field.
func FamilyGTE(v string) predicate.Oval {
	return predicate.Oval(sql.FieldGTE(FieldFamily, v))
}

// FamilyLT applies the LT predicate on the "family" field.
func FamilyLT(v string) predicate.Oval {
	return predicate.Oval(sql.FieldLT(FieldFamily, v))
}

// FamilyLTE applies the LTE predicate on the "family" field.
func FamilyLTE(v string) predicate.Oval {
	return predicate.Oval(sql.FieldLTE(FieldFamily, v))
}

// FamilyContains applies the Contains predicate on the "family" field.
func FamilyContains(v string) predicate.Oval {
	return predicate.Oval(sql.FieldContains(FieldFamily, v))
}

// FamilyHasPrefix applies the HasPrefix predicate on the "family" field.
func FamilyHasPrefix(v string) predicate.Oval {
	return predicate.Oval(sql.FieldHasPrefix(FieldFamily, v))
}

// FamilyHasSuffix applies the HasSuffix predicate on the "family" field.
func FamilyHasSuffix(v string) predicate.Oval {
	return predicate.Oval(sql.FieldHasSuffix(FieldFamily, v))
}

// FamilyEqualFold applies the EqualFold predicate on the "family" field.
func FamilyEqualFold(v string) predicate.Oval {
	return predicate.Oval(sql.FieldEqualFold(FieldFamily, v))
}

// FamilyContainsFold applies the ContainsFold predicate on the "family" field.
func FamilyContainsFold(v string) predicate.Oval {
	return predicate.Oval(sql.FieldContainsFold(FieldFamily, v))
}

// CopyrightEQ applies the EQ predicate on the "copyright" field.
func CopyrightEQ(v string) predicate.Oval {
	return predicate.Oval(sql.FieldEQ(FieldCopyright, v))
}

// CopyrightNEQ applies the NEQ predicate on the "copyright" field.
func CopyrightNEQ(v string) predicate.Oval {
	return predicate.Oval(sql.FieldNEQ(FieldCopyright, v))
}

// CopyrightIn applies the In predicate on the "copyright" field.
func CopyrightIn(vs ...string) predicate.Oval {
	return predicate.Oval(sql.FieldIn(FieldCopyright, vs...))
}

// CopyrightNotIn applies the NotIn predicate on the "copyright" field.
func CopyrightNotIn(vs ...string) predicate.Oval {
	return predicate.Oval(sql.FieldNotIn(FieldCopyright, vs...))
}

// CopyrightGT applies the GT predicate on the "copyright" field.
func CopyrightGT(v string) predicate.Oval {
	return predicate.Oval(sql.FieldGT(FieldCopyright, v))
}

// CopyrightGTE applies the GTE predicate on the "copyright" field.
func CopyrightGTE(v string) predicate.Oval {
	return predicate.Oval(sql.FieldGTE(FieldCopyright, v))
}

// CopyrightLT applies the LT predicate on the "copyright" field.
func CopyrightLT(v string) predicate.Oval {
	return predicate.Oval(sql.FieldLT(FieldCopyright, v))
}

// CopyrightLTE applies the LTE predicate on the "copyright" field.
func CopyrightLTE(v string) predicate.Oval {
	return predicate.Oval(sql.FieldLTE(FieldCopyright, v))
}

// CopyrightContains applies the Contains predicate on the "copyright" field.
func CopyrightContains(v string) predicate.Oval {
	return predicate.Oval(sql.FieldContains(FieldCopyright, v))
}

// CopyrightHasPrefix applies the HasPrefix predicate on the "copyright" field.
func CopyrightHasPrefix(v string) predicate.Oval {
	return predicate.Oval(sql.FieldHasPrefix(FieldCopyright, v))
}

// CopyrightHasSuffix applies the HasSuffix predicate on the "copyright" field.
func CopyrightHasSuffix(v string) predicate.Oval {
	return predicate.Oval(sql.FieldHasSuffix(FieldCopyright, v))
}

// CopyrightEqualFold applies the EqualFold predicate on the "copyright" field.
func CopyrightEqualFold(v string) predicate.Oval {
	return predicate.Oval(sql.FieldEqualFold(FieldCopyright, v))
}

// CopyrightContainsFold applies the ContainsFold predicate on the "copyright" field.
func CopyrightContainsFold(v string) predicate.Oval {
	return predicate.Oval(sql.FieldContainsFold(FieldCopyright, v))
}

// TimestampEQ applies the EQ predicate on the "timestamp" field.
func TimestampEQ(v string) predicate.Oval {
	return predicate.Oval(sql.FieldEQ(FieldTimestamp, v))
}

// TimestampNEQ applies the NEQ predicate on the "timestamp" field.
func TimestampNEQ(v string) predicate.Oval {
	return predicate.Oval(sql.FieldNEQ(FieldTimestamp, v))
}

// TimestampIn applies the In predicate on the "timestamp" field.
func TimestampIn(vs ...string) predicate.Oval {
	return predicate.Oval(sql.FieldIn(FieldTimestamp, vs...))
}

// TimestampNotIn applies the NotIn predicate on the "timestamp" field.
func TimestampNotIn(vs ...string) predicate.Oval {
	return predicate.Oval(sql.FieldNotIn(FieldTimestamp, vs...))
}

// TimestampGT applies the GT predicate on the "timestamp" field.
func TimestampGT(v string) predicate.Oval {
	return predicate.Oval(sql.FieldGT(FieldTimestamp, v))
}

// TimestampGTE applies the GTE predicate on the "timestamp" field.
func TimestampGTE(v string) predicate.Oval {
	return predicate.Oval(sql.FieldGTE(FieldTimestamp, v))
}

// TimestampLT applies the LT predicate on the "timestamp" field.
func TimestampLT(v string) predicate.Oval {
	return predicate.Oval(sql.FieldLT(FieldTimestamp, v))
}

// TimestampLTE applies the LTE predicate on the "timestamp" field.
func TimestampLTE(v string) predicate.Oval {
	return predicate.Oval(sql.FieldLTE(FieldTimestamp, v))
}

// TimestampContains applies the Contains predicate on the "timestamp" field.
func TimestampContains(v string) predicate.Oval {
	return predicate.Oval(sql.FieldContains(FieldTimestamp, v))
}

// TimestampHasPrefix applies the HasPrefix predicate on the "timestamp" field.
func TimestampHasPrefix(v string) predicate.Oval {
	return predicate.Oval(sql.FieldHasPrefix(FieldTimestamp, v))
}

// TimestampHasSuffix applies the HasSuffix predicate on the "timestamp" field.
func TimestampHasSuffix(v string) predicate.Oval {
	return predicate.Oval(sql.FieldHasSuffix(FieldTimestamp, v))
}

// TimestampEqualFold applies the EqualFold predicate on the "timestamp" field.
func TimestampEqualFold(v string) predicate.Oval {
	return predicate.Oval(sql.FieldEqualFold(FieldTimestamp, v))
}

// TimestampContainsFold applies the ContainsFold predicate on the "timestamp" field.
func TimestampContainsFold(v string) predicate.Oval {
	return predicate.Oval(sql.FieldContainsFold(FieldTimestamp, v))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.Oval {
	return predicate.Oval(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.Oval {
	return predicate.Oval(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.Oval {
	return predicate.Oval(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.Oval {
	return predicate.Oval(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.Oval {
	return predicate.Oval(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.Oval {
	return predicate.Oval(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.Oval {
	return predicate.Oval(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.Oval {
	return predicate.Oval(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.Oval {
	return predicate.Oval(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.Oval {
	return predicate.Oval(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.Oval {
	return predicate.Oval(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.Oval {
	return predicate.Oval(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.Oval {
	return predicate.Oval(sql.FieldContainsFold(FieldTitle, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Oval {
	return predicate.Oval(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Oval {
	return predicate.Oval(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Oval {
	return predicate.Oval(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Oval {
	return predicate.Oval(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Oval {
	return predicate.Oval(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Oval {
	return predicate.Oval(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Oval {
	return predicate.Oval(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Oval {
	return predicate.Oval(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Oval {
	return predicate.Oval(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Oval {
	return predicate.Oval(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Oval {
	return predicate.Oval(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Oval {
	return predicate.Oval(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Oval {
	return predicate.Oval(sql.FieldContainsFold(FieldDescription, v))
}

// SeverityEQ applies the EQ predicate on the "severity" field.
func SeverityEQ(v string) predicate.Oval {
	return predicate.Oval(sql.FieldEQ(FieldSeverity, v))
}

// SeverityNEQ applies the NEQ predicate on the "severity" field.
func SeverityNEQ(v string) predicate.Oval {
	return predicate.Oval(sql.FieldNEQ(FieldSeverity, v))
}

// SeverityIn applies the In predicate on the "severity" field.
func SeverityIn(vs ...string) predicate.Oval {
	return predicate.Oval(sql.FieldIn(FieldSeverity, vs...))
}

// SeverityNotIn applies the NotIn predicate on the "severity" field.
func SeverityNotIn(vs ...string) predicate.Oval {
	return predicate.Oval(sql.FieldNotIn(FieldSeverity, vs...))
}

// SeverityGT applies the GT predicate on the "severity" field.
func SeverityGT(v string) predicate.Oval {
	return predicate.Oval(sql.FieldGT(FieldSeverity, v))
}

// SeverityGTE applies the GTE predicate on the "severity" field.
func SeverityGTE(v string) predicate.Oval {
	return predicate.Oval(sql.FieldGTE(FieldSeverity, v))
}

// SeverityLT applies the LT predicate on the "severity" field.
func SeverityLT(v string) predicate.Oval {
	return predicate.Oval(sql.FieldLT(FieldSeverity, v))
}

// SeverityLTE applies the LTE predicate on the "severity" field.
func SeverityLTE(v string) predicate.Oval {
	return predicate.Oval(sql.FieldLTE(FieldSeverity, v))
}

// SeverityContains applies the Contains predicate on the "severity" field.
func SeverityContains(v string) predicate.Oval {
	return predicate.Oval(sql.FieldContains(FieldSeverity, v))
}

// SeverityHasPrefix applies the HasPrefix predicate on the "severity" field.
func SeverityHasPrefix(v string) predicate.Oval {
	return predicate.Oval(sql.FieldHasPrefix(FieldSeverity, v))
}

// SeverityHasSuffix applies the HasSuffix predicate on the "severity" field.
func SeverityHasSuffix(v string) predicate.Oval {
	return predicate.Oval(sql.FieldHasSuffix(FieldSeverity, v))
}

// SeverityEqualFold applies the EqualFold predicate on the "severity" field.
func SeverityEqualFold(v string) predicate.Oval {
	return predicate.Oval(sql.FieldEqualFold(FieldSeverity, v))
}

// SeverityContainsFold applies the ContainsFold predicate on the "severity" field.
func SeverityContainsFold(v string) predicate.Oval {
	return predicate.Oval(sql.FieldContainsFold(FieldSeverity, v))
}

// IssuedateEQ applies the EQ predicate on the "issuedate" field.
func IssuedateEQ(v string) predicate.Oval {
	return predicate.Oval(sql.FieldEQ(FieldIssuedate, v))
}

// IssuedateNEQ applies the NEQ predicate on the "issuedate" field.
func IssuedateNEQ(v string) predicate.Oval {
	return predicate.Oval(sql.FieldNEQ(FieldIssuedate, v))
}

// IssuedateIn applies the In predicate on the "issuedate" field.
func IssuedateIn(vs ...string) predicate.Oval {
	return predicate.Oval(sql.FieldIn(FieldIssuedate, vs...))
}

// IssuedateNotIn applies the NotIn predicate on the "issuedate" field.
func IssuedateNotIn(vs ...string) predicate.Oval {
	return predicate.Oval(sql.FieldNotIn(FieldIssuedate, vs...))
}

// IssuedateGT applies the GT predicate on the "issuedate" field.
func IssuedateGT(v string) predicate.Oval {
	return predicate.Oval(sql.FieldGT(FieldIssuedate, v))
}

// IssuedateGTE applies the GTE predicate on the "issuedate" field.
func IssuedateGTE(v string) predicate.Oval {
	return predicate.Oval(sql.FieldGTE(FieldIssuedate, v))
}

// IssuedateLT applies the LT predicate on the "issuedate" field.
func IssuedateLT(v string) predicate.Oval {
	return predicate.Oval(sql.FieldLT(FieldIssuedate, v))
}

// IssuedateLTE applies the LTE predicate on the "issuedate" field.
func IssuedateLTE(v string) predicate.Oval {
	return predicate.Oval(sql.FieldLTE(FieldIssuedate, v))
}

// IssuedateContains applies the Contains predicate on the "issuedate" field.
func IssuedateContains(v string) predicate.Oval {
	return predicate.Oval(sql.FieldContains(FieldIssuedate, v))
}

// IssuedateHasPrefix applies the HasPrefix predicate on the "issuedate" field.
func IssuedateHasPrefix(v string) predicate.Oval {
	return predicate.Oval(sql.FieldHasPrefix(FieldIssuedate, v))
}

// IssuedateHasSuffix applies the HasSuffix predicate on the "issuedate" field.
func IssuedateHasSuffix(v string) predicate.Oval {
	return predicate.Oval(sql.FieldHasSuffix(FieldIssuedate, v))
}

// IssuedateEqualFold applies the EqualFold predicate on the "issuedate" field.
func IssuedateEqualFold(v string) predicate.Oval {
	return predicate.Oval(sql.FieldEqualFold(FieldIssuedate, v))
}

// IssuedateContainsFold applies the ContainsFold predicate on the "issuedate" field.
func IssuedateContainsFold(v string) predicate.Oval {
	return predicate.Oval(sql.FieldContainsFold(FieldIssuedate, v))
}

// PlatformEQ applies the EQ predicate on the "platform" field.
func PlatformEQ(v string) predicate.Oval {
	return predicate.Oval(sql.FieldEQ(FieldPlatform, v))
}

// PlatformNEQ applies the NEQ predicate on the "platform" field.
func PlatformNEQ(v string) predicate.Oval {
	return predicate.Oval(sql.FieldNEQ(FieldPlatform, v))
}

// PlatformIn applies the In predicate on the "platform" field.
func PlatformIn(vs ...string) predicate.Oval {
	return predicate.Oval(sql.FieldIn(FieldPlatform, vs...))
}

// PlatformNotIn applies the NotIn predicate on the "platform" field.
func PlatformNotIn(vs ...string) predicate.Oval {
	return predicate.Oval(sql.FieldNotIn(FieldPlatform, vs...))
}

// PlatformGT applies the GT predicate on the "platform" field.
func PlatformGT(v string) predicate.Oval {
	return predicate.Oval(sql.FieldGT(FieldPlatform, v))
}

// PlatformGTE applies the GTE predicate on the "platform" field.
func PlatformGTE(v string) predicate.Oval {
	return predicate.Oval(sql.FieldGTE(FieldPlatform, v))
}

// PlatformLT applies the LT predicate on the "platform" field.
func PlatformLT(v string) predicate.Oval {
	return predicate.Oval(sql.FieldLT(FieldPlatform, v))
}

// PlatformLTE applies the LTE predicate on the "platform" field.
func PlatformLTE(v string) predicate.Oval {
	return predicate.Oval(sql.FieldLTE(FieldPlatform, v))
}

// PlatformContains applies the Contains predicate on the "platform" field.
func PlatformContains(v string) predicate.Oval {
	return predicate.Oval(sql.FieldContains(FieldPlatform, v))
}

// PlatformHasPrefix applies the HasPrefix predicate on the "platform" field.
func PlatformHasPrefix(v string) predicate.Oval {
	return predicate.Oval(sql.FieldHasPrefix(FieldPlatform, v))
}

// PlatformHasSuffix applies the HasSuffix predicate on the "platform" field.
func PlatformHasSuffix(v string) predicate.Oval {
	return predicate.Oval(sql.FieldHasSuffix(FieldPlatform, v))
}

// PlatformEqualFold applies the EqualFold predicate on the "platform" field.
func PlatformEqualFold(v string) predicate.Oval {
	return predicate.Oval(sql.FieldEqualFold(FieldPlatform, v))
}

// PlatformContainsFold applies the ContainsFold predicate on the "platform" field.
func PlatformContainsFold(v string) predicate.Oval {
	return predicate.Oval(sql.FieldContainsFold(FieldPlatform, v))
}

// ArchListEQ applies the EQ predicate on the "arch_list" field.
func ArchListEQ(v string) predicate.Oval {
	return predicate.Oval(sql.FieldEQ(FieldArchList, v))
}

// ArchListNEQ applies the NEQ predicate on the "arch_list" field.
func ArchListNEQ(v string) predicate.Oval {
	return predicate.Oval(sql.FieldNEQ(FieldArchList, v))
}

// ArchListIn applies the In predicate on the "arch_list" field.
func ArchListIn(vs ...string) predicate.Oval {
	return predicate.Oval(sql.FieldIn(FieldArchList, vs...))
}

// ArchListNotIn applies the NotIn predicate on the "arch_list" field.
func ArchListNotIn(vs ...string) predicate.Oval {
	return predicate.Oval(sql.FieldNotIn(FieldArchList, vs...))
}

// ArchListGT applies the GT predicate on the "arch_list" field.
func ArchListGT(v string) predicate.Oval {
	return predicate.Oval(sql.FieldGT(FieldArchList, v))
}

// ArchListGTE applies the GTE predicate on the "arch_list" field.
func ArchListGTE(v string) predicate.Oval {
	return predicate.Oval(sql.FieldGTE(FieldArchList, v))
}

// ArchListLT applies the LT predicate on the "arch_list" field.
func ArchListLT(v string) predicate.Oval {
	return predicate.Oval(sql.FieldLT(FieldArchList, v))
}

// ArchListLTE applies the LTE predicate on the "arch_list" field.
func ArchListLTE(v string) predicate.Oval {
	return predicate.Oval(sql.FieldLTE(FieldArchList, v))
}

// ArchListContains applies the Contains predicate on the "arch_list" field.
func ArchListContains(v string) predicate.Oval {
	return predicate.Oval(sql.FieldContains(FieldArchList, v))
}

// ArchListHasPrefix applies the HasPrefix predicate on the "arch_list" field.
func ArchListHasPrefix(v string) predicate.Oval {
	return predicate.Oval(sql.FieldHasPrefix(FieldArchList, v))
}

// ArchListHasSuffix applies the HasSuffix predicate on the "arch_list" field.
func ArchListHasSuffix(v string) predicate.Oval {
	return predicate.Oval(sql.FieldHasSuffix(FieldArchList, v))
}

// ArchListEqualFold applies the EqualFold predicate on the "arch_list" field.
func ArchListEqualFold(v string) predicate.Oval {
	return predicate.Oval(sql.FieldEqualFold(FieldArchList, v))
}

// ArchListContainsFold applies the ContainsFold predicate on the "arch_list" field.
func ArchListContainsFold(v string) predicate.Oval {
	return predicate.Oval(sql.FieldContainsFold(FieldArchList, v))
}

// CveListEQ applies the EQ predicate on the "cve_list" field.
func CveListEQ(v string) predicate.Oval {
	return predicate.Oval(sql.FieldEQ(FieldCveList, v))
}

// CveListNEQ applies the NEQ predicate on the "cve_list" field.
func CveListNEQ(v string) predicate.Oval {
	return predicate.Oval(sql.FieldNEQ(FieldCveList, v))
}

// CveListIn applies the In predicate on the "cve_list" field.
func CveListIn(vs ...string) predicate.Oval {
	return predicate.Oval(sql.FieldIn(FieldCveList, vs...))
}

// CveListNotIn applies the NotIn predicate on the "cve_list" field.
func CveListNotIn(vs ...string) predicate.Oval {
	return predicate.Oval(sql.FieldNotIn(FieldCveList, vs...))
}

// CveListGT applies the GT predicate on the "cve_list" field.
func CveListGT(v string) predicate.Oval {
	return predicate.Oval(sql.FieldGT(FieldCveList, v))
}

// CveListGTE applies the GTE predicate on the "cve_list" field.
func CveListGTE(v string) predicate.Oval {
	return predicate.Oval(sql.FieldGTE(FieldCveList, v))
}

// CveListLT applies the LT predicate on the "cve_list" field.
func CveListLT(v string) predicate.Oval {
	return predicate.Oval(sql.FieldLT(FieldCveList, v))
}

// CveListLTE applies the LTE predicate on the "cve_list" field.
func CveListLTE(v string) predicate.Oval {
	return predicate.Oval(sql.FieldLTE(FieldCveList, v))
}

// CveListContains applies the Contains predicate on the "cve_list" field.
func CveListContains(v string) predicate.Oval {
	return predicate.Oval(sql.FieldContains(FieldCveList, v))
}

// CveListHasPrefix applies the HasPrefix predicate on the "cve_list" field.
func CveListHasPrefix(v string) predicate.Oval {
	return predicate.Oval(sql.FieldHasPrefix(FieldCveList, v))
}

// CveListHasSuffix applies the HasSuffix predicate on the "cve_list" field.
func CveListHasSuffix(v string) predicate.Oval {
	return predicate.Oval(sql.FieldHasSuffix(FieldCveList, v))
}

// CveListEqualFold applies the EqualFold predicate on the "cve_list" field.
func CveListEqualFold(v string) predicate.Oval {
	return predicate.Oval(sql.FieldEqualFold(FieldCveList, v))
}

// CveListContainsFold applies the ContainsFold predicate on the "cve_list" field.
func CveListContainsFold(v string) predicate.Oval {
	return predicate.Oval(sql.FieldContainsFold(FieldCveList, v))
}

// TestListEQ applies the EQ predicate on the "test_list" field.
func TestListEQ(v string) predicate.Oval {
	return predicate.Oval(sql.FieldEQ(FieldTestList, v))
}

// TestListNEQ applies the NEQ predicate on the "test_list" field.
func TestListNEQ(v string) predicate.Oval {
	return predicate.Oval(sql.FieldNEQ(FieldTestList, v))
}

// TestListIn applies the In predicate on the "test_list" field.
func TestListIn(vs ...string) predicate.Oval {
	return predicate.Oval(sql.FieldIn(FieldTestList, vs...))
}

// TestListNotIn applies the NotIn predicate on the "test_list" field.
func TestListNotIn(vs ...string) predicate.Oval {
	return predicate.Oval(sql.FieldNotIn(FieldTestList, vs...))
}

// TestListGT applies the GT predicate on the "test_list" field.
func TestListGT(v string) predicate.Oval {
	return predicate.Oval(sql.FieldGT(FieldTestList, v))
}

// TestListGTE applies the GTE predicate on the "test_list" field.
func TestListGTE(v string) predicate.Oval {
	return predicate.Oval(sql.FieldGTE(FieldTestList, v))
}

// TestListLT applies the LT predicate on the "test_list" field.
func TestListLT(v string) predicate.Oval {
	return predicate.Oval(sql.FieldLT(FieldTestList, v))
}

// TestListLTE applies the LTE predicate on the "test_list" field.
func TestListLTE(v string) predicate.Oval {
	return predicate.Oval(sql.FieldLTE(FieldTestList, v))
}

// TestListContains applies the Contains predicate on the "test_list" field.
func TestListContains(v string) predicate.Oval {
	return predicate.Oval(sql.FieldContains(FieldTestList, v))
}

// TestListHasPrefix applies the HasPrefix predicate on the "test_list" field.
func TestListHasPrefix(v string) predicate.Oval {
	return predicate.Oval(sql.FieldHasPrefix(FieldTestList, v))
}

// TestListHasSuffix applies the HasSuffix predicate on the "test_list" field.
func TestListHasSuffix(v string) predicate.Oval {
	return predicate.Oval(sql.FieldHasSuffix(FieldTestList, v))
}

// TestListEqualFold applies the EqualFold predicate on the "test_list" field.
func TestListEqualFold(v string) predicate.Oval {
	return predicate.Oval(sql.FieldEqualFold(FieldTestList, v))
}

// TestListContainsFold applies the ContainsFold predicate on the "test_list" field.
func TestListContainsFold(v string) predicate.Oval {
	return predicate.Oval(sql.FieldContainsFold(FieldTestList, v))
}

// ObjectListEQ applies the EQ predicate on the "object_list" field.
func ObjectListEQ(v string) predicate.Oval {
	return predicate.Oval(sql.FieldEQ(FieldObjectList, v))
}

// ObjectListNEQ applies the NEQ predicate on the "object_list" field.
func ObjectListNEQ(v string) predicate.Oval {
	return predicate.Oval(sql.FieldNEQ(FieldObjectList, v))
}

// ObjectListIn applies the In predicate on the "object_list" field.
func ObjectListIn(vs ...string) predicate.Oval {
	return predicate.Oval(sql.FieldIn(FieldObjectList, vs...))
}

// ObjectListNotIn applies the NotIn predicate on the "object_list" field.
func ObjectListNotIn(vs ...string) predicate.Oval {
	return predicate.Oval(sql.FieldNotIn(FieldObjectList, vs...))
}

// ObjectListGT applies the GT predicate on the "object_list" field.
func ObjectListGT(v string) predicate.Oval {
	return predicate.Oval(sql.FieldGT(FieldObjectList, v))
}

// ObjectListGTE applies the GTE predicate on the "object_list" field.
func ObjectListGTE(v string) predicate.Oval {
	return predicate.Oval(sql.FieldGTE(FieldObjectList, v))
}

// ObjectListLT applies the LT predicate on the "object_list" field.
func ObjectListLT(v string) predicate.Oval {
	return predicate.Oval(sql.FieldLT(FieldObjectList, v))
}

// ObjectListLTE applies the LTE predicate on the "object_list" field.
func ObjectListLTE(v string) predicate.Oval {
	return predicate.Oval(sql.FieldLTE(FieldObjectList, v))
}

// ObjectListContains applies the Contains predicate on the "object_list" field.
func ObjectListContains(v string) predicate.Oval {
	return predicate.Oval(sql.FieldContains(FieldObjectList, v))
}

// ObjectListHasPrefix applies the HasPrefix predicate on the "object_list" field.
func ObjectListHasPrefix(v string) predicate.Oval {
	return predicate.Oval(sql.FieldHasPrefix(FieldObjectList, v))
}

// ObjectListHasSuffix applies the HasSuffix predicate on the "object_list" field.
func ObjectListHasSuffix(v string) predicate.Oval {
	return predicate.Oval(sql.FieldHasSuffix(FieldObjectList, v))
}

// ObjectListEqualFold applies the EqualFold predicate on the "object_list" field.
func ObjectListEqualFold(v string) predicate.Oval {
	return predicate.Oval(sql.FieldEqualFold(FieldObjectList, v))
}

// ObjectListContainsFold applies the ContainsFold predicate on the "object_list" field.
func ObjectListContainsFold(v string) predicate.Oval {
	return predicate.Oval(sql.FieldContainsFold(FieldObjectList, v))
}

// StateListEQ applies the EQ predicate on the "state_list" field.
func StateListEQ(v string) predicate.Oval {
	return predicate.Oval(sql.FieldEQ(FieldStateList, v))
}

// StateListNEQ applies the NEQ predicate on the "state_list" field.
func StateListNEQ(v string) predicate.Oval {
	return predicate.Oval(sql.FieldNEQ(FieldStateList, v))
}

// StateListIn applies the In predicate on the "state_list" field.
func StateListIn(vs ...string) predicate.Oval {
	return predicate.Oval(sql.FieldIn(FieldStateList, vs...))
}

// StateListNotIn applies the NotIn predicate on the "state_list" field.
func StateListNotIn(vs ...string) predicate.Oval {
	return predicate.Oval(sql.FieldNotIn(FieldStateList, vs...))
}

// StateListGT applies the GT predicate on the "state_list" field.
func StateListGT(v string) predicate.Oval {
	return predicate.Oval(sql.FieldGT(FieldStateList, v))
}

// StateListGTE applies the GTE predicate on the "state_list" field.
func StateListGTE(v string) predicate.Oval {
	return predicate.Oval(sql.FieldGTE(FieldStateList, v))
}

// StateListLT applies the LT predicate on the "state_list" field.
func StateListLT(v string) predicate.Oval {
	return predicate.Oval(sql.FieldLT(FieldStateList, v))
}

// StateListLTE applies the LTE predicate on the "state_list" field.
func StateListLTE(v string) predicate.Oval {
	return predicate.Oval(sql.FieldLTE(FieldStateList, v))
}

// StateListContains applies the Contains predicate on the "state_list" field.
func StateListContains(v string) predicate.Oval {
	return predicate.Oval(sql.FieldContains(FieldStateList, v))
}

// StateListHasPrefix applies the HasPrefix predicate on the "state_list" field.
func StateListHasPrefix(v string) predicate.Oval {
	return predicate.Oval(sql.FieldHasPrefix(FieldStateList, v))
}

// StateListHasSuffix applies the HasSuffix predicate on the "state_list" field.
func StateListHasSuffix(v string) predicate.Oval {
	return predicate.Oval(sql.FieldHasSuffix(FieldStateList, v))
}

// StateListEqualFold applies the EqualFold predicate on the "state_list" field.
func StateListEqualFold(v string) predicate.Oval {
	return predicate.Oval(sql.FieldEqualFold(FieldStateList, v))
}

// StateListContainsFold applies the ContainsFold predicate on the "state_list" field.
func StateListContainsFold(v string) predicate.Oval {
	return predicate.Oval(sql.FieldContainsFold(FieldStateList, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Oval) predicate.Oval {
	return predicate.Oval(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Oval) predicate.Oval {
	return predicate.Oval(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Oval) predicate.Oval {
	return predicate.Oval(sql.NotPredicates(p))
}
