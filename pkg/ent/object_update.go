// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"ct_oval_tool/pkg/ent/object"
	"ct_oval_tool/pkg/ent/predicate"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ObjectUpdate is the builder for updating Object entities.
type ObjectUpdate struct {
	config
	hooks    []Hook
	mutation *ObjectMutation
}

// Where appends a list predicates to the ObjectUpdate builder.
func (ou *ObjectUpdate) Where(ps ...predicate.Object) *ObjectUpdate {
	ou.mutation.Where(ps...)
	return ou
}

// SetObjectID sets the "object_id" field.
func (ou *ObjectUpdate) SetObjectID(s string) *ObjectUpdate {
	ou.mutation.SetObjectID(s)
	return ou
}

// SetNillableObjectID sets the "object_id" field if the given value is not nil.
func (ou *ObjectUpdate) SetNillableObjectID(s *string) *ObjectUpdate {
	if s != nil {
		ou.SetObjectID(*s)
	}
	return ou
}

// SetName sets the "name" field.
func (ou *ObjectUpdate) SetName(s string) *ObjectUpdate {
	ou.mutation.SetName(s)
	return ou
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ou *ObjectUpdate) SetNillableName(s *string) *ObjectUpdate {
	if s != nil {
		ou.SetName(*s)
	}
	return ou
}

// Mutation returns the ObjectMutation object of the builder.
func (ou *ObjectUpdate) Mutation() *ObjectMutation {
	return ou.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ou *ObjectUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ou.sqlSave, ou.mutation, ou.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ou *ObjectUpdate) SaveX(ctx context.Context) int {
	affected, err := ou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ou *ObjectUpdate) Exec(ctx context.Context) error {
	_, err := ou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ou *ObjectUpdate) ExecX(ctx context.Context) {
	if err := ou.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ou *ObjectUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(object.Table, object.Columns, sqlgraph.NewFieldSpec(object.FieldID, field.TypeInt))
	if ps := ou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ou.mutation.ObjectID(); ok {
		_spec.SetField(object.FieldObjectID, field.TypeString, value)
	}
	if value, ok := ou.mutation.Name(); ok {
		_spec.SetField(object.FieldName, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{object.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ou.mutation.done = true
	return n, nil
}

// ObjectUpdateOne is the builder for updating a single Object entity.
type ObjectUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ObjectMutation
}

// SetObjectID sets the "object_id" field.
func (ouo *ObjectUpdateOne) SetObjectID(s string) *ObjectUpdateOne {
	ouo.mutation.SetObjectID(s)
	return ouo
}

// SetNillableObjectID sets the "object_id" field if the given value is not nil.
func (ouo *ObjectUpdateOne) SetNillableObjectID(s *string) *ObjectUpdateOne {
	if s != nil {
		ouo.SetObjectID(*s)
	}
	return ouo
}

// SetName sets the "name" field.
func (ouo *ObjectUpdateOne) SetName(s string) *ObjectUpdateOne {
	ouo.mutation.SetName(s)
	return ouo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ouo *ObjectUpdateOne) SetNillableName(s *string) *ObjectUpdateOne {
	if s != nil {
		ouo.SetName(*s)
	}
	return ouo
}

// Mutation returns the ObjectMutation object of the builder.
func (ouo *ObjectUpdateOne) Mutation() *ObjectMutation {
	return ouo.mutation
}

// Where appends a list predicates to the ObjectUpdate builder.
func (ouo *ObjectUpdateOne) Where(ps ...predicate.Object) *ObjectUpdateOne {
	ouo.mutation.Where(ps...)
	return ouo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ouo *ObjectUpdateOne) Select(field string, fields ...string) *ObjectUpdateOne {
	ouo.fields = append([]string{field}, fields...)
	return ouo
}

// Save executes the query and returns the updated Object entity.
func (ouo *ObjectUpdateOne) Save(ctx context.Context) (*Object, error) {
	return withHooks(ctx, ouo.sqlSave, ouo.mutation, ouo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ouo *ObjectUpdateOne) SaveX(ctx context.Context) *Object {
	node, err := ouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ouo *ObjectUpdateOne) Exec(ctx context.Context) error {
	_, err := ouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ouo *ObjectUpdateOne) ExecX(ctx context.Context) {
	if err := ouo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ouo *ObjectUpdateOne) sqlSave(ctx context.Context) (_node *Object, err error) {
	_spec := sqlgraph.NewUpdateSpec(object.Table, object.Columns, sqlgraph.NewFieldSpec(object.FieldID, field.TypeInt))
	id, ok := ouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Object.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, object.FieldID)
		for _, f := range fields {
			if !object.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != object.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ouo.mutation.ObjectID(); ok {
		_spec.SetField(object.FieldObjectID, field.TypeString, value)
	}
	if value, ok := ouo.mutation.Name(); ok {
		_spec.SetField(object.FieldName, field.TypeString, value)
	}
	_node = &Object{config: ouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{object.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ouo.mutation.done = true
	return _node, nil
}
