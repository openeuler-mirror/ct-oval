// Code generated by ent, DO NOT EDIT.

package test

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the test type in the database.
	Label = "test"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTestID holds the string denoting the test_id field in the database.
	FieldTestID = "test_id"
	// FieldComment holds the string denoting the comment field in the database.
	FieldComment = "comment"
	// FieldObjectID holds the string denoting the object_id field in the database.
	FieldObjectID = "object_id"
	// FieldStateID holds the string denoting the state_id field in the database.
	FieldStateID = "state_id"
	// Table holds the table name of the test in the database.
	Table = "tests"
)

// Columns holds all SQL columns for test fields.
var Columns = []string{
	FieldID,
	FieldTestID,
	FieldComment,
	FieldObjectID,
	FieldStateID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Test queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTestID orders the results by the test_id field.
func ByTestID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTestID, opts...).ToFunc()
}

// ByComment orders the results by the comment field.
func ByComment(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldComment, opts...).ToFunc()
}

// ByObjectID orders the results by the object_id field.
func ByObjectID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldObjectID, opts...).ToFunc()
}

// ByStateID orders the results by the state_id field.
func ByStateID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStateID, opts...).ToFunc()
}
