// Code generated by ent, DO NOT EDIT.

package ent

import (
	"ct_oval_tool/pkg/ent/oval"
	"ct_oval_tool/pkg/ent/schema"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	ovalFields := schema.Oval{}.Fields()
	_ = ovalFields
	// ovalDescArchList is the schema descriptor for arch_list field.
	ovalDescArchList := ovalFields[14].Descriptor()
	// oval.DefaultArchList holds the default value on creation for the arch_list field.
	oval.DefaultArchList = ovalDescArchList.Default.(string)
	// ovalDescCveList is the schema descriptor for cve_list field.
	ovalDescCveList := ovalFields[15].Descriptor()
	// oval.DefaultCveList holds the default value on creation for the cve_list field.
	oval.DefaultCveList = ovalDescCveList.Default.(string)
	// ovalDescTestList is the schema descriptor for test_list field.
	ovalDescTestList := ovalFields[16].Descriptor()
	// oval.DefaultTestList holds the default value on creation for the test_list field.
	oval.DefaultTestList = ovalDescTestList.Default.(string)
	// ovalDescObjectList is the schema descriptor for object_list field.
	ovalDescObjectList := ovalFields[17].Descriptor()
	// oval.DefaultObjectList holds the default value on creation for the object_list field.
	oval.DefaultObjectList = ovalDescObjectList.Default.(string)
	// ovalDescStateList is the schema descriptor for state_list field.
	ovalDescStateList := ovalFields[18].Descriptor()
	// oval.DefaultStateList holds the default value on creation for the state_list field.
	oval.DefaultStateList = ovalDescStateList.Default.(string)
}
