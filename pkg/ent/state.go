// Code generated by ent, DO NOT EDIT.

package ent

import (
	"ct_oval_tool/pkg/ent/state"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// State is the model entity for the State schema.
type State struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// StateID holds the value of the "state_id" field.
	StateID string `json:"state_id,omitempty"`
	// Value holds the value of the "value" field.
	Value string `json:"value,omitempty"`
	// Tag holds the value of the "tag" field.
	Tag string `json:"tag,omitempty"`
	// Datatype holds the value of the "datatype" field.
	Datatype string `json:"datatype,omitempty"`
	// Operation holds the value of the "operation" field.
	Operation    string `json:"operation,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*State) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case state.FieldID:
			values[i] = new(sql.NullInt64)
		case state.FieldStateID, state.FieldValue, state.FieldTag, state.FieldDatatype, state.FieldOperation:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the State fields.
func (s *State) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case state.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int(value.Int64)
		case state.FieldStateID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field state_id", values[i])
			} else if value.Valid {
				s.StateID = value.String
			}
		case state.FieldValue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field value", values[i])
			} else if value.Valid {
				s.Value = value.String
			}
		case state.FieldTag:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tag", values[i])
			} else if value.Valid {
				s.Tag = value.String
			}
		case state.FieldDatatype:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field datatype", values[i])
			} else if value.Valid {
				s.Datatype = value.String
			}
		case state.FieldOperation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field operation", values[i])
			} else if value.Valid {
				s.Operation = value.String
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// GetValue returns the ent.Value that was dynamically selected and assigned to the State.
// This includes values selected through modifiers, order, etc.
func (s *State) GetValue(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// Update returns a builder for updating this State.
// Note that you need to call State.Unwrap() before calling this method if this State
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *State) Update() *StateUpdateOne {
	return NewStateClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the State entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *State) Unwrap() *State {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: State is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *State) String() string {
	var builder strings.Builder
	builder.WriteString("State(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("state_id=")
	builder.WriteString(s.StateID)
	builder.WriteString(", ")
	builder.WriteString("value=")
	builder.WriteString(s.Value)
	builder.WriteString(", ")
	builder.WriteString("tag=")
	builder.WriteString(s.Tag)
	builder.WriteString(", ")
	builder.WriteString("datatype=")
	builder.WriteString(s.Datatype)
	builder.WriteString(", ")
	builder.WriteString("operation=")
	builder.WriteString(s.Operation)
	builder.WriteByte(')')
	return builder.String()
}

// States is a parsable slice of State.
type States []*State
