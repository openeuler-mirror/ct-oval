// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"ct_oval_tool/pkg/ent/migrate"

	"ct_oval_tool/pkg/ent/cveref"
	"ct_oval_tool/pkg/ent/object"
	"ct_oval_tool/pkg/ent/oval"
	"ct_oval_tool/pkg/ent/state"
	"ct_oval_tool/pkg/ent/test"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Cveref is the client for interacting with the Cveref builders.
	Cveref *CverefClient
	// Object is the client for interacting with the Object builders.
	Object *ObjectClient
	// Oval is the client for interacting with the Oval builders.
	Oval *OvalClient
	// State is the client for interacting with the State builders.
	State *StateClient
	// Test is the client for interacting with the Test builders.
	Test *TestClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Cveref = NewCverefClient(c.config)
	c.Object = NewObjectClient(c.config)
	c.Oval = NewOvalClient(c.config)
	c.State = NewStateClient(c.config)
	c.Test = NewTestClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:    ctx,
		config: cfg,
		Cveref: NewCverefClient(cfg),
		Object: NewObjectClient(cfg),
		Oval:   NewOvalClient(cfg),
		State:  NewStateClient(cfg),
		Test:   NewTestClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:    ctx,
		config: cfg,
		Cveref: NewCverefClient(cfg),
		Object: NewObjectClient(cfg),
		Oval:   NewOvalClient(cfg),
		State:  NewStateClient(cfg),
		Test:   NewTestClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Cveref.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Cveref.Use(hooks...)
	c.Object.Use(hooks...)
	c.Oval.Use(hooks...)
	c.State.Use(hooks...)
	c.Test.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.Cveref.Intercept(interceptors...)
	c.Object.Intercept(interceptors...)
	c.Oval.Intercept(interceptors...)
	c.State.Intercept(interceptors...)
	c.Test.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *CverefMutation:
		return c.Cveref.mutate(ctx, m)
	case *ObjectMutation:
		return c.Object.mutate(ctx, m)
	case *OvalMutation:
		return c.Oval.mutate(ctx, m)
	case *StateMutation:
		return c.State.mutate(ctx, m)
	case *TestMutation:
		return c.Test.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// CverefClient is a client for the Cveref schema.
type CverefClient struct {
	config
}

// NewCverefClient returns a client for the Cveref from the given config.
func NewCverefClient(c config) *CverefClient {
	return &CverefClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `cveref.Hooks(f(g(h())))`.
func (c *CverefClient) Use(hooks ...Hook) {
	c.hooks.Cveref = append(c.hooks.Cveref, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `cveref.Intercept(f(g(h())))`.
func (c *CverefClient) Intercept(interceptors ...Interceptor) {
	c.inters.Cveref = append(c.inters.Cveref, interceptors...)
}

// Create returns a builder for creating a Cveref entity.
func (c *CverefClient) Create() *CverefCreate {
	mutation := newCverefMutation(c.config, OpCreate)
	return &CverefCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Cveref entities.
func (c *CverefClient) CreateBulk(builders ...*CverefCreate) *CverefCreateBulk {
	return &CverefCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CverefClient) MapCreateBulk(slice any, setFunc func(*CverefCreate, int)) *CverefCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CverefCreateBulk{err: fmt.Errorf("calling to CverefClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CverefCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CverefCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Cveref.
func (c *CverefClient) Update() *CverefUpdate {
	mutation := newCverefMutation(c.config, OpUpdate)
	return &CverefUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CverefClient) UpdateOne(cv *Cveref) *CverefUpdateOne {
	mutation := newCverefMutation(c.config, OpUpdateOne, withCveref(cv))
	return &CverefUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CverefClient) UpdateOneID(id int) *CverefUpdateOne {
	mutation := newCverefMutation(c.config, OpUpdateOne, withCverefID(id))
	return &CverefUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Cveref.
func (c *CverefClient) Delete() *CverefDelete {
	mutation := newCverefMutation(c.config, OpDelete)
	return &CverefDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CverefClient) DeleteOne(cv *Cveref) *CverefDeleteOne {
	return c.DeleteOneID(cv.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CverefClient) DeleteOneID(id int) *CverefDeleteOne {
	builder := c.Delete().Where(cveref.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CverefDeleteOne{builder}
}

// Query returns a query builder for Cveref.
func (c *CverefClient) Query() *CverefQuery {
	return &CverefQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCveref},
		inters: c.Interceptors(),
	}
}

// Get returns a Cveref entity by its id.
func (c *CverefClient) Get(ctx context.Context, id int) (*Cveref, error) {
	return c.Query().Where(cveref.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CverefClient) GetX(ctx context.Context, id int) *Cveref {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CverefClient) Hooks() []Hook {
	return c.hooks.Cveref
}

// Interceptors returns the client interceptors.
func (c *CverefClient) Interceptors() []Interceptor {
	return c.inters.Cveref
}

func (c *CverefClient) mutate(ctx context.Context, m *CverefMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CverefCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CverefUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CverefUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CverefDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Cveref mutation op: %q", m.Op())
	}
}

// ObjectClient is a client for the Object schema.
type ObjectClient struct {
	config
}

// NewObjectClient returns a client for the Object from the given config.
func NewObjectClient(c config) *ObjectClient {
	return &ObjectClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `object.Hooks(f(g(h())))`.
func (c *ObjectClient) Use(hooks ...Hook) {
	c.hooks.Object = append(c.hooks.Object, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `object.Intercept(f(g(h())))`.
func (c *ObjectClient) Intercept(interceptors ...Interceptor) {
	c.inters.Object = append(c.inters.Object, interceptors...)
}

// Create returns a builder for creating a Object entity.
func (c *ObjectClient) Create() *ObjectCreate {
	mutation := newObjectMutation(c.config, OpCreate)
	return &ObjectCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Object entities.
func (c *ObjectClient) CreateBulk(builders ...*ObjectCreate) *ObjectCreateBulk {
	return &ObjectCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ObjectClient) MapCreateBulk(slice any, setFunc func(*ObjectCreate, int)) *ObjectCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ObjectCreateBulk{err: fmt.Errorf("calling to ObjectClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ObjectCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ObjectCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Object.
func (c *ObjectClient) Update() *ObjectUpdate {
	mutation := newObjectMutation(c.config, OpUpdate)
	return &ObjectUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ObjectClient) UpdateOne(o *Object) *ObjectUpdateOne {
	mutation := newObjectMutation(c.config, OpUpdateOne, withObject(o))
	return &ObjectUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ObjectClient) UpdateOneID(id int) *ObjectUpdateOne {
	mutation := newObjectMutation(c.config, OpUpdateOne, withObjectID(id))
	return &ObjectUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Object.
func (c *ObjectClient) Delete() *ObjectDelete {
	mutation := newObjectMutation(c.config, OpDelete)
	return &ObjectDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ObjectClient) DeleteOne(o *Object) *ObjectDeleteOne {
	return c.DeleteOneID(o.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ObjectClient) DeleteOneID(id int) *ObjectDeleteOne {
	builder := c.Delete().Where(object.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ObjectDeleteOne{builder}
}

// Query returns a query builder for Object.
func (c *ObjectClient) Query() *ObjectQuery {
	return &ObjectQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeObject},
		inters: c.Interceptors(),
	}
}

// Get returns a Object entity by its id.
func (c *ObjectClient) Get(ctx context.Context, id int) (*Object, error) {
	return c.Query().Where(object.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ObjectClient) GetX(ctx context.Context, id int) *Object {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ObjectClient) Hooks() []Hook {
	return c.hooks.Object
}

// Interceptors returns the client interceptors.
func (c *ObjectClient) Interceptors() []Interceptor {
	return c.inters.Object
}

func (c *ObjectClient) mutate(ctx context.Context, m *ObjectMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ObjectCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ObjectUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ObjectUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ObjectDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Object mutation op: %q", m.Op())
	}
}

// OvalClient is a client for the Oval schema.
type OvalClient struct {
	config
}

// NewOvalClient returns a client for the Oval from the given config.
func NewOvalClient(c config) *OvalClient {
	return &OvalClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `oval.Hooks(f(g(h())))`.
func (c *OvalClient) Use(hooks ...Hook) {
	c.hooks.Oval = append(c.hooks.Oval, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `oval.Intercept(f(g(h())))`.
func (c *OvalClient) Intercept(interceptors ...Interceptor) {
	c.inters.Oval = append(c.inters.Oval, interceptors...)
}

// Create returns a builder for creating a Oval entity.
func (c *OvalClient) Create() *OvalCreate {
	mutation := newOvalMutation(c.config, OpCreate)
	return &OvalCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Oval entities.
func (c *OvalClient) CreateBulk(builders ...*OvalCreate) *OvalCreateBulk {
	return &OvalCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *OvalClient) MapCreateBulk(slice any, setFunc func(*OvalCreate, int)) *OvalCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &OvalCreateBulk{err: fmt.Errorf("calling to OvalClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*OvalCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &OvalCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Oval.
func (c *OvalClient) Update() *OvalUpdate {
	mutation := newOvalMutation(c.config, OpUpdate)
	return &OvalUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OvalClient) UpdateOne(o *Oval) *OvalUpdateOne {
	mutation := newOvalMutation(c.config, OpUpdateOne, withOval(o))
	return &OvalUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OvalClient) UpdateOneID(id string) *OvalUpdateOne {
	mutation := newOvalMutation(c.config, OpUpdateOne, withOvalID(id))
	return &OvalUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Oval.
func (c *OvalClient) Delete() *OvalDelete {
	mutation := newOvalMutation(c.config, OpDelete)
	return &OvalDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OvalClient) DeleteOne(o *Oval) *OvalDeleteOne {
	return c.DeleteOneID(o.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *OvalClient) DeleteOneID(id string) *OvalDeleteOne {
	builder := c.Delete().Where(oval.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OvalDeleteOne{builder}
}

// Query returns a query builder for Oval.
func (c *OvalClient) Query() *OvalQuery {
	return &OvalQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeOval},
		inters: c.Interceptors(),
	}
}

// Get returns a Oval entity by its id.
func (c *OvalClient) Get(ctx context.Context, id string) (*Oval, error) {
	return c.Query().Where(oval.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OvalClient) GetX(ctx context.Context, id string) *Oval {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *OvalClient) Hooks() []Hook {
	return c.hooks.Oval
}

// Interceptors returns the client interceptors.
func (c *OvalClient) Interceptors() []Interceptor {
	return c.inters.Oval
}

func (c *OvalClient) mutate(ctx context.Context, m *OvalMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&OvalCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&OvalUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&OvalUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&OvalDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Oval mutation op: %q", m.Op())
	}
}

// StateClient is a client for the State schema.
type StateClient struct {
	config
}

// NewStateClient returns a client for the State from the given config.
func NewStateClient(c config) *StateClient {
	return &StateClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `state.Hooks(f(g(h())))`.
func (c *StateClient) Use(hooks ...Hook) {
	c.hooks.State = append(c.hooks.State, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `state.Intercept(f(g(h())))`.
func (c *StateClient) Intercept(interceptors ...Interceptor) {
	c.inters.State = append(c.inters.State, interceptors...)
}

// Create returns a builder for creating a State entity.
func (c *StateClient) Create() *StateCreate {
	mutation := newStateMutation(c.config, OpCreate)
	return &StateCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of State entities.
func (c *StateClient) CreateBulk(builders ...*StateCreate) *StateCreateBulk {
	return &StateCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *StateClient) MapCreateBulk(slice any, setFunc func(*StateCreate, int)) *StateCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &StateCreateBulk{err: fmt.Errorf("calling to StateClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*StateCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &StateCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for State.
func (c *StateClient) Update() *StateUpdate {
	mutation := newStateMutation(c.config, OpUpdate)
	return &StateUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *StateClient) UpdateOne(s *State) *StateUpdateOne {
	mutation := newStateMutation(c.config, OpUpdateOne, withState(s))
	return &StateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *StateClient) UpdateOneID(id int) *StateUpdateOne {
	mutation := newStateMutation(c.config, OpUpdateOne, withStateID(id))
	return &StateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for State.
func (c *StateClient) Delete() *StateDelete {
	mutation := newStateMutation(c.config, OpDelete)
	return &StateDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *StateClient) DeleteOne(s *State) *StateDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *StateClient) DeleteOneID(id int) *StateDeleteOne {
	builder := c.Delete().Where(state.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &StateDeleteOne{builder}
}

// Query returns a query builder for State.
func (c *StateClient) Query() *StateQuery {
	return &StateQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeState},
		inters: c.Interceptors(),
	}
}

// Get returns a State entity by its id.
func (c *StateClient) Get(ctx context.Context, id int) (*State, error) {
	return c.Query().Where(state.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *StateClient) GetX(ctx context.Context, id int) *State {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *StateClient) Hooks() []Hook {
	return c.hooks.State
}

// Interceptors returns the client interceptors.
func (c *StateClient) Interceptors() []Interceptor {
	return c.inters.State
}

func (c *StateClient) mutate(ctx context.Context, m *StateMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&StateCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&StateUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&StateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&StateDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown State mutation op: %q", m.Op())
	}
}

// TestClient is a client for the Test schema.
type TestClient struct {
	config
}

// NewTestClient returns a client for the Test from the given config.
func NewTestClient(c config) *TestClient {
	return &TestClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `test.Hooks(f(g(h())))`.
func (c *TestClient) Use(hooks ...Hook) {
	c.hooks.Test = append(c.hooks.Test, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `test.Intercept(f(g(h())))`.
func (c *TestClient) Intercept(interceptors ...Interceptor) {
	c.inters.Test = append(c.inters.Test, interceptors...)
}

// Create returns a builder for creating a Test entity.
func (c *TestClient) Create() *TestCreate {
	mutation := newTestMutation(c.config, OpCreate)
	return &TestCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Test entities.
func (c *TestClient) CreateBulk(builders ...*TestCreate) *TestCreateBulk {
	return &TestCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *TestClient) MapCreateBulk(slice any, setFunc func(*TestCreate, int)) *TestCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &TestCreateBulk{err: fmt.Errorf("calling to TestClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*TestCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &TestCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Test.
func (c *TestClient) Update() *TestUpdate {
	mutation := newTestMutation(c.config, OpUpdate)
	return &TestUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TestClient) UpdateOne(t *Test) *TestUpdateOne {
	mutation := newTestMutation(c.config, OpUpdateOne, withTest(t))
	return &TestUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TestClient) UpdateOneID(id int) *TestUpdateOne {
	mutation := newTestMutation(c.config, OpUpdateOne, withTestID(id))
	return &TestUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Test.
func (c *TestClient) Delete() *TestDelete {
	mutation := newTestMutation(c.config, OpDelete)
	return &TestDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TestClient) DeleteOne(t *Test) *TestDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TestClient) DeleteOneID(id int) *TestDeleteOne {
	builder := c.Delete().Where(test.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TestDeleteOne{builder}
}

// Query returns a query builder for Test.
func (c *TestClient) Query() *TestQuery {
	return &TestQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTest},
		inters: c.Interceptors(),
	}
}

// Get returns a Test entity by its id.
func (c *TestClient) Get(ctx context.Context, id int) (*Test, error) {
	return c.Query().Where(test.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TestClient) GetX(ctx context.Context, id int) *Test {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *TestClient) Hooks() []Hook {
	return c.hooks.Test
}

// Interceptors returns the client interceptors.
func (c *TestClient) Interceptors() []Interceptor {
	return c.inters.Test
}

func (c *TestClient) mutate(ctx context.Context, m *TestMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TestCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TestUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TestUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TestDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Test mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Cveref, Object, Oval, State, Test []ent.Hook
	}
	inters struct {
		Cveref, Object, Oval, State, Test []ent.Interceptor
	}
)
